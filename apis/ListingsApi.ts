/* tslint:disable */
/* eslint-disable */
/**
 * Aryeo
 * # Introduction The Aryeo API provides access to the Aryeo platform.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: jarrodp@zillowgroup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiError403,
  ApiError404,
  ApiError409,
  ApiError500,
  ApiFail422,
  ListingCollection,
  ListingPostPayload,
  ListingPutPayload,
  ListingResource,
  VideoPutPayload,
  VideoResource,
} from '../models/index';
import {
    ApiError403FromJSON,
    ApiError403ToJSON,
    ApiError404FromJSON,
    ApiError404ToJSON,
    ApiError409FromJSON,
    ApiError409ToJSON,
    ApiError500FromJSON,
    ApiError500ToJSON,
    ApiFail422FromJSON,
    ApiFail422ToJSON,
    ListingCollectionFromJSON,
    ListingCollectionToJSON,
    ListingPostPayloadFromJSON,
    ListingPostPayloadToJSON,
    ListingPutPayloadFromJSON,
    ListingPutPayloadToJSON,
    ListingResourceFromJSON,
    ListingResourceToJSON,
    VideoPutPayloadFromJSON,
    VideoPutPayloadToJSON,
    VideoResourceFromJSON,
    VideoResourceToJSON,
} from '../models/index';

export interface DeleteVideosVideoIdRequest {
    videoId: string;
    aryeoGroupId: string;
}

export interface GetListingsRequest {
    aryeoGroupId?: string;
    include?: string;
    filterSearch?: string;
    filterAddress?: string;
    filterListAgent?: string;
    filterStatus?: GetListingsFilterStatusEnum;
    filterActive?: boolean;
    filterPriceGte?: number;
    filterPriceLte?: number;
    filterSquareFeetGte?: number;
    filterSquareFeetLte?: number;
    filterBedroomsGte?: number;
    filterBedroomsLte?: number;
    filterBathroomsGte?: number;
    filterBathroomsLte?: number;
    sort?: string;
    perPage?: string;
    page?: string;
}

export interface GetListingsIdRequest {
    listingId: string;
    aryeoGroupId: string;
    include?: string;
}

export interface GetVideosVideoIdRequest {
    videoId: string;
    aryeoGroupId: string;
}

export interface ListingsListingIdCubiCasaGetRequest {
    listingId: string;
}

export interface ListingsListingIdDetailsSearchGetRequest {
    listingId: string;
}

export interface ListingsListingIdStatsGetRequest {
    listingId: string;
}

export interface PostListingsRequest {
    aryeoGroupId: string;
    listingPostPayload?: ListingPostPayload;
}

export interface PutVideosVideoIdRequest {
    videoId: string;
    aryeoGroupId: string;
    videoPutPayload?: VideoPutPayload;
}

export interface UpdateListingsRequest {
    listingId: string;
    aryeoGroupId: string;
    listingPutPayload?: ListingPutPayload;
}

/**
 * 
 */
export class ListingsApi extends runtime.BaseAPI {

    /**
     * Delete a video.
     */
    async deleteVideosVideoIdRaw(requestParameters: DeleteVideosVideoIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['videoId'] == null) {
            throw new runtime.RequiredError(
                'videoId',
                'Required parameter "videoId" was null or undefined when calling deleteVideosVideoId().'
            );
        }

        if (requestParameters['aryeoGroupId'] == null) {
            throw new runtime.RequiredError(
                'aryeoGroupId',
                'Required parameter "aryeoGroupId" was null or undefined when calling deleteVideosVideoId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['aryeoGroupId'] != null) {
            headerParameters['Aryeo-Group-Id'] = String(requestParameters['aryeoGroupId']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/videos/{video_id}`.replace(`{${"video_id"}}`, encodeURIComponent(String(requestParameters['videoId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a video.
     */
    async deleteVideosVideoId(requestParameters: DeleteVideosVideoIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteVideosVideoIdRaw(requestParameters, initOverrides);
    }

    /**
     * Lists all listings available to a group.
     */
    async getListingsRaw(requestParameters: GetListingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListingCollection>> {
        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        if (requestParameters['filterSearch'] != null) {
            queryParameters['filter[search]'] = requestParameters['filterSearch'];
        }

        if (requestParameters['filterAddress'] != null) {
            queryParameters['filter[address]'] = requestParameters['filterAddress'];
        }

        if (requestParameters['filterListAgent'] != null) {
            queryParameters['filter[list_agent]'] = requestParameters['filterListAgent'];
        }

        if (requestParameters['filterStatus'] != null) {
            queryParameters['filter[status]'] = requestParameters['filterStatus'];
        }

        if (requestParameters['filterActive'] != null) {
            queryParameters['filter[active]'] = requestParameters['filterActive'];
        }

        if (requestParameters['filterPriceGte'] != null) {
            queryParameters['filter[price_gte]'] = requestParameters['filterPriceGte'];
        }

        if (requestParameters['filterPriceLte'] != null) {
            queryParameters['filter[price_lte]'] = requestParameters['filterPriceLte'];
        }

        if (requestParameters['filterSquareFeetGte'] != null) {
            queryParameters['filter[square_feet_gte]'] = requestParameters['filterSquareFeetGte'];
        }

        if (requestParameters['filterSquareFeetLte'] != null) {
            queryParameters['filter[square_feet_lte]'] = requestParameters['filterSquareFeetLte'];
        }

        if (requestParameters['filterBedroomsGte'] != null) {
            queryParameters['filter[bedrooms_gte]'] = requestParameters['filterBedroomsGte'];
        }

        if (requestParameters['filterBedroomsLte'] != null) {
            queryParameters['filter[bedrooms_lte]'] = requestParameters['filterBedroomsLte'];
        }

        if (requestParameters['filterBathroomsGte'] != null) {
            queryParameters['filter[bathrooms_gte]'] = requestParameters['filterBathroomsGte'];
        }

        if (requestParameters['filterBathroomsLte'] != null) {
            queryParameters['filter[bathrooms_lte]'] = requestParameters['filterBathroomsLte'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        if (requestParameters['perPage'] != null) {
            queryParameters['per_page'] = requestParameters['perPage'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['aryeoGroupId'] != null) {
            headerParameters['Aryeo-Group-Id'] = String(requestParameters['aryeoGroupId']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/listings`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListingCollectionFromJSON(jsonValue));
    }

    /**
     * Lists all listings available to a group.
     */
    async getListings(requestParameters: GetListingsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListingCollection> {
        const response = await this.getListingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves the details of a listing with the given ID.
     */
    async getListingsIdRaw(requestParameters: GetListingsIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListingResource>> {
        if (requestParameters['listingId'] == null) {
            throw new runtime.RequiredError(
                'listingId',
                'Required parameter "listingId" was null or undefined when calling getListingsId().'
            );
        }

        if (requestParameters['aryeoGroupId'] == null) {
            throw new runtime.RequiredError(
                'aryeoGroupId',
                'Required parameter "aryeoGroupId" was null or undefined when calling getListingsId().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['aryeoGroupId'] != null) {
            headerParameters['Aryeo-Group-Id'] = String(requestParameters['aryeoGroupId']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/listings/{listing_id}`.replace(`{${"listing_id"}}`, encodeURIComponent(String(requestParameters['listingId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListingResourceFromJSON(jsonValue));
    }

    /**
     * Retrieves the details of a listing with the given ID.
     */
    async getListingsId(requestParameters: GetListingsIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListingResource> {
        const response = await this.getListingsIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a video.
     */
    async getVideosVideoIdRaw(requestParameters: GetVideosVideoIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VideoResource>> {
        if (requestParameters['videoId'] == null) {
            throw new runtime.RequiredError(
                'videoId',
                'Required parameter "videoId" was null or undefined when calling getVideosVideoId().'
            );
        }

        if (requestParameters['aryeoGroupId'] == null) {
            throw new runtime.RequiredError(
                'aryeoGroupId',
                'Required parameter "aryeoGroupId" was null or undefined when calling getVideosVideoId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['aryeoGroupId'] != null) {
            headerParameters['Aryeo-Group-Id'] = String(requestParameters['aryeoGroupId']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/videos/{video_id}`.replace(`{${"video_id"}}`, encodeURIComponent(String(requestParameters['videoId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VideoResourceFromJSON(jsonValue));
    }

    /**
     * Retrieve a video.
     */
    async getVideosVideoId(requestParameters: GetVideosVideoIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VideoResource> {
        const response = await this.getVideosVideoIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * listings-listing-id-cubi-casa-get
     */
    async listingsListingIdCubiCasaGetRaw(requestParameters: ListingsListingIdCubiCasaGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['listingId'] == null) {
            throw new runtime.RequiredError(
                'listingId',
                'Required parameter "listingId" was null or undefined when calling listingsListingIdCubiCasaGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/listings/{listing_id}/cubi-casa`.replace(`{${"listing_id"}}`, encodeURIComponent(String(requestParameters['listingId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * listings-listing-id-cubi-casa-get
     */
    async listingsListingIdCubiCasaGet(requestParameters: ListingsListingIdCubiCasaGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.listingsListingIdCubiCasaGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * listings-listing-id-details-search-get
     */
    async listingsListingIdDetailsSearchGetRaw(requestParameters: ListingsListingIdDetailsSearchGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['listingId'] == null) {
            throw new runtime.RequiredError(
                'listingId',
                'Required parameter "listingId" was null or undefined when calling listingsListingIdDetailsSearchGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/listings/{listing_id}/details/search`.replace(`{${"listing_id"}}`, encodeURIComponent(String(requestParameters['listingId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * listings-listing-id-details-search-get
     */
    async listingsListingIdDetailsSearchGet(requestParameters: ListingsListingIdDetailsSearchGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.listingsListingIdDetailsSearchGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * listings-listing-id-stats-get
     */
    async listingsListingIdStatsGetRaw(requestParameters: ListingsListingIdStatsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['listingId'] == null) {
            throw new runtime.RequiredError(
                'listingId',
                'Required parameter "listingId" was null or undefined when calling listingsListingIdStatsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/listings/{listing_id}/stats`.replace(`{${"listing_id"}}`, encodeURIComponent(String(requestParameters['listingId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * listings-listing-id-stats-get
     */
    async listingsListingIdStatsGet(requestParameters: ListingsListingIdStatsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.listingsListingIdStatsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a listing.
     */
    async postListingsRaw(requestParameters: PostListingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListingResource>> {
        if (requestParameters['aryeoGroupId'] == null) {
            throw new runtime.RequiredError(
                'aryeoGroupId',
                'Required parameter "aryeoGroupId" was null or undefined when calling postListings().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['aryeoGroupId'] != null) {
            headerParameters['Aryeo-Group-Id'] = String(requestParameters['aryeoGroupId']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/listings`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ListingPostPayloadToJSON(requestParameters['listingPostPayload']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListingResourceFromJSON(jsonValue));
    }

    /**
     * Create a listing.
     */
    async postListings(requestParameters: PostListingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListingResource> {
        const response = await this.postListingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a video.
     */
    async putVideosVideoIdRaw(requestParameters: PutVideosVideoIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VideoResource>> {
        if (requestParameters['videoId'] == null) {
            throw new runtime.RequiredError(
                'videoId',
                'Required parameter "videoId" was null or undefined when calling putVideosVideoId().'
            );
        }

        if (requestParameters['aryeoGroupId'] == null) {
            throw new runtime.RequiredError(
                'aryeoGroupId',
                'Required parameter "aryeoGroupId" was null or undefined when calling putVideosVideoId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['aryeoGroupId'] != null) {
            headerParameters['Aryeo-Group-Id'] = String(requestParameters['aryeoGroupId']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/videos/{video_id}`.replace(`{${"video_id"}}`, encodeURIComponent(String(requestParameters['videoId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: VideoPutPayloadToJSON(requestParameters['videoPutPayload']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VideoResourceFromJSON(jsonValue));
    }

    /**
     * Update a video.
     */
    async putVideosVideoId(requestParameters: PutVideosVideoIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VideoResource> {
        const response = await this.putVideosVideoIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a listing.
     */
    async updateListingsRaw(requestParameters: UpdateListingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListingResource>> {
        if (requestParameters['listingId'] == null) {
            throw new runtime.RequiredError(
                'listingId',
                'Required parameter "listingId" was null or undefined when calling updateListings().'
            );
        }

        if (requestParameters['aryeoGroupId'] == null) {
            throw new runtime.RequiredError(
                'aryeoGroupId',
                'Required parameter "aryeoGroupId" was null or undefined when calling updateListings().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['aryeoGroupId'] != null) {
            headerParameters['Aryeo-Group-Id'] = String(requestParameters['aryeoGroupId']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/listings/{listing_id}`.replace(`{${"listing_id"}}`, encodeURIComponent(String(requestParameters['listingId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ListingPutPayloadToJSON(requestParameters['listingPutPayload']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListingResourceFromJSON(jsonValue));
    }

    /**
     * Update a listing.
     */
    async updateListings(requestParameters: UpdateListingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListingResource> {
        const response = await this.updateListingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetListingsFilterStatusEnum = {
    Draft: 'DRAFT',
    ComingSoon: 'COMING_SOON',
    ForLease: 'FOR_LEASE',
    ForSale: 'FOR_SALE',
    PendingSale: 'PENDING_SALE',
    PendingLease: 'PENDING_LEASE',
    Sold: 'SOLD',
    Leased: 'LEASED',
    OffMarket: 'OFF_MARKET',
    Null: 'null'
} as const;
export type GetListingsFilterStatusEnum = typeof GetListingsFilterStatusEnum[keyof typeof GetListingsFilterStatusEnum];
