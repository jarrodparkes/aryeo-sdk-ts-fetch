/* tslint:disable */
/* eslint-disable */
/**
 * Aryeo
 * # Introduction The Aryeo API provides access to the Aryeo platform.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: jarrodp@zillowgroup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiError403,
  ApiError404,
  ApiError500,
  ApiFail422,
  CalendarDayCollection,
  TimeslotCollection,
} from '../models/index';
import {
    ApiError403FromJSON,
    ApiError403ToJSON,
    ApiError404FromJSON,
    ApiError404ToJSON,
    ApiError500FromJSON,
    ApiError500ToJSON,
    ApiFail422FromJSON,
    ApiFail422ToJSON,
    CalendarDayCollectionFromJSON,
    CalendarDayCollectionToJSON,
    TimeslotCollectionFromJSON,
    TimeslotCollectionToJSON,
} from '../models/index';

export interface BlocksBlockIdDeleteRequest {
    blockId: string;
}

export interface BlocksBlockIdGetRequest {
    blockId: string;
}

export interface BlocksBlockIdPutRequest {
    blockId: string;
}

export interface GetAvailableDatesRequest {
    aryeoGroupId: string;
    timezone: string;
    filterUserIds?: Array<string>;
    filterAppointmentId?: string;
    filterStartAt?: Date;
    filterEndAt?: Date;
    filterTimeframe?: GetAvailableDatesFilterTimeframeEnum;
    duration?: number;
    interval?: number;
    page?: number;
    perPage?: number;
}

export interface GetAvailableTimeslotsRequest {
    aryeoGroupId: string;
    date: Date;
    timezone: string;
    filterUserIds?: Array<string>;
    filterAppointmentId?: string;
    duration?: number;
    interval?: number;
    page?: number;
    perPage?: number;
}

/**
 * 
 */
export class SchedulingApi extends runtime.BaseAPI {

    /**
     * blocks-block-id-delete
     */
    async blocksBlockIdDeleteRaw(requestParameters: BlocksBlockIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['blockId'] == null) {
            throw new runtime.RequiredError(
                'blockId',
                'Required parameter "blockId" was null or undefined when calling blocksBlockIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/blocks/{block_id}`.replace(`{${"block_id"}}`, encodeURIComponent(String(requestParameters['blockId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * blocks-block-id-delete
     */
    async blocksBlockIdDelete(requestParameters: BlocksBlockIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.blocksBlockIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * blocks-block-id-get
     */
    async blocksBlockIdGetRaw(requestParameters: BlocksBlockIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['blockId'] == null) {
            throw new runtime.RequiredError(
                'blockId',
                'Required parameter "blockId" was null or undefined when calling blocksBlockIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/blocks/{block_id}`.replace(`{${"block_id"}}`, encodeURIComponent(String(requestParameters['blockId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * blocks-block-id-get
     */
    async blocksBlockIdGet(requestParameters: BlocksBlockIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.blocksBlockIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * blocks-block-id-put
     */
    async blocksBlockIdPutRaw(requestParameters: BlocksBlockIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['blockId'] == null) {
            throw new runtime.RequiredError(
                'blockId',
                'Required parameter "blockId" was null or undefined when calling blocksBlockIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/blocks/{block_id}`.replace(`{${"block_id"}}`, encodeURIComponent(String(requestParameters['blockId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * blocks-block-id-put
     */
    async blocksBlockIdPut(requestParameters: BlocksBlockIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.blocksBlockIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * blocks-post
     */
    async blocksPostRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/blocks`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * blocks-post
     */
    async blocksPost(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.blocksPostRaw(initOverrides);
        return await response.value();
    }

    /**
     * Fetch available calendar days for scheduling or rescheduling an appointment. Availability can be retrieved using a specific start & end date range, or using a timeframe. When using a timeframe, the page parameter can be used to flip through weeks, months, etc.
     */
    async getAvailableDatesRaw(requestParameters: GetAvailableDatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CalendarDayCollection>> {
        if (requestParameters['aryeoGroupId'] == null) {
            throw new runtime.RequiredError(
                'aryeoGroupId',
                'Required parameter "aryeoGroupId" was null or undefined when calling getAvailableDates().'
            );
        }

        if (requestParameters['timezone'] == null) {
            throw new runtime.RequiredError(
                'timezone',
                'Required parameter "timezone" was null or undefined when calling getAvailableDates().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['filterUserIds'] != null) {
            queryParameters['filter[user_ids][]'] = requestParameters['filterUserIds']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['filterAppointmentId'] != null) {
            queryParameters['filter[appointment_id]'] = requestParameters['filterAppointmentId'];
        }

        if (requestParameters['filterStartAt'] != null) {
            queryParameters['filter[start_at]'] = (requestParameters['filterStartAt'] as any).toISOString();
        }

        if (requestParameters['filterEndAt'] != null) {
            queryParameters['filter[end_at]'] = (requestParameters['filterEndAt'] as any).toISOString();
        }

        if (requestParameters['filterTimeframe'] != null) {
            queryParameters['filter[timeframe]'] = requestParameters['filterTimeframe'];
        }

        if (requestParameters['duration'] != null) {
            queryParameters['duration'] = requestParameters['duration'];
        }

        if (requestParameters['interval'] != null) {
            queryParameters['interval'] = requestParameters['interval'];
        }

        if (requestParameters['timezone'] != null) {
            queryParameters['timezone'] = requestParameters['timezone'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['perPage'] != null) {
            queryParameters['per_page'] = requestParameters['perPage'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['aryeoGroupId'] != null) {
            headerParameters['Aryeo-Group-Id'] = String(requestParameters['aryeoGroupId']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/scheduling/available-dates`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CalendarDayCollectionFromJSON(jsonValue));
    }

    /**
     * Fetch available calendar days for scheduling or rescheduling an appointment. Availability can be retrieved using a specific start & end date range, or using a timeframe. When using a timeframe, the page parameter can be used to flip through weeks, months, etc.
     */
    async getAvailableDates(requestParameters: GetAvailableDatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CalendarDayCollection> {
        const response = await this.getAvailableDatesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Fetch available timeslots for scheduling or rescheduling an appointment. Timeslots are returned for the entire day in the local timezone.   Results are returned in UTC!
     */
    async getAvailableTimeslotsRaw(requestParameters: GetAvailableTimeslotsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TimeslotCollection>> {
        if (requestParameters['aryeoGroupId'] == null) {
            throw new runtime.RequiredError(
                'aryeoGroupId',
                'Required parameter "aryeoGroupId" was null or undefined when calling getAvailableTimeslots().'
            );
        }

        if (requestParameters['date'] == null) {
            throw new runtime.RequiredError(
                'date',
                'Required parameter "date" was null or undefined when calling getAvailableTimeslots().'
            );
        }

        if (requestParameters['timezone'] == null) {
            throw new runtime.RequiredError(
                'timezone',
                'Required parameter "timezone" was null or undefined when calling getAvailableTimeslots().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['filterUserIds'] != null) {
            queryParameters['filter[user_ids][]'] = requestParameters['filterUserIds']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['filterAppointmentId'] != null) {
            queryParameters['filter[appointment_id]'] = requestParameters['filterAppointmentId'];
        }

        if (requestParameters['duration'] != null) {
            queryParameters['duration'] = requestParameters['duration'];
        }

        if (requestParameters['interval'] != null) {
            queryParameters['interval'] = requestParameters['interval'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['perPage'] != null) {
            queryParameters['per_page'] = requestParameters['perPage'];
        }

        if (requestParameters['date'] != null) {
            queryParameters['date'] = (requestParameters['date'] as any).toISOString().substring(0,10);
        }

        if (requestParameters['timezone'] != null) {
            queryParameters['timezone'] = requestParameters['timezone'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['aryeoGroupId'] != null) {
            headerParameters['Aryeo-Group-Id'] = String(requestParameters['aryeoGroupId']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/scheduling/available-timeslots`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TimeslotCollectionFromJSON(jsonValue));
    }

    /**
     * Fetch available timeslots for scheduling or rescheduling an appointment. Timeslots are returned for the entire day in the local timezone.   Results are returned in UTC!
     */
    async getAvailableTimeslots(requestParameters: GetAvailableTimeslotsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TimeslotCollection> {
        const response = await this.getAvailableTimeslotsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * regions-get
     */
    async regionsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/regions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * regions-get
     */
    async regionsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.regionsGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * scheduling-assignment-get
     */
    async schedulingAssignmentGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/scheduling/assignment`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * scheduling-assignment-get
     */
    async schedulingAssignmentGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.schedulingAssignmentGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * scheduling-item-groupings-get
     */
    async schedulingItemGroupingsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/scheduling/item-groupings`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * scheduling-item-groupings-get
     */
    async schedulingItemGroupingsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.schedulingItemGroupingsGetRaw(initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetAvailableDatesFilterTimeframeEnum = {
    Day: 'DAY',
    Week: 'WEEK',
    Month: 'MONTH',
    Year: 'YEAR'
} as const;
export type GetAvailableDatesFilterTimeframeEnum = typeof GetAvailableDatesFilterTimeframeEnum[keyof typeof GetAvailableDatesFilterTimeframeEnum];
