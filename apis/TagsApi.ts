/* tslint:disable */
/* eslint-disable */
/**
 * Aryeo
 * # Introduction The Aryeo API provides access to the Aryeo platform.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: jarrodp@zillowgroup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiError404,
  ApiError500,
  ApiFail422,
} from '../models/index';
import {
    ApiError404FromJSON,
    ApiError404ToJSON,
    ApiError500FromJSON,
    ApiError500ToJSON,
    ApiFail422FromJSON,
    ApiFail422ToJSON,
} from '../models/index';

export interface CustomerTeamsCustomerTeamIdTagsPostRequest {
    customerTeamId: string;
}

export interface CustomerTeamsCustomerTeamIdTagsPutRequest {
    customerTeamId: string;
}

export interface CustomerTeamsCustomerTeamIdTagsTagIdDeleteRequest {
    customerTeamId: string;
    tagId: string;
}

export interface OrdersOrderIdTagsTagIdDeleteRequest {
    orderId: string;
    tagId: string;
}

export interface TagsTagIdPutRequest {
    tagId: string;
}

/**
 * 
 */
export class TagsApi extends runtime.BaseAPI {

    /**
     * customer-teams-customer-team-id-tags-post
     */
    async customerTeamsCustomerTeamIdTagsPostRaw(requestParameters: CustomerTeamsCustomerTeamIdTagsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['customerTeamId'] == null) {
            throw new runtime.RequiredError(
                'customerTeamId',
                'Required parameter "customerTeamId" was null or undefined when calling customerTeamsCustomerTeamIdTagsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/customer-teams/{customer_team_id}/tags`.replace(`{${"customer_team_id"}}`, encodeURIComponent(String(requestParameters['customerTeamId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * customer-teams-customer-team-id-tags-post
     */
    async customerTeamsCustomerTeamIdTagsPost(requestParameters: CustomerTeamsCustomerTeamIdTagsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.customerTeamsCustomerTeamIdTagsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * customer-teams-customer-team-id-tags-put
     */
    async customerTeamsCustomerTeamIdTagsPutRaw(requestParameters: CustomerTeamsCustomerTeamIdTagsPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['customerTeamId'] == null) {
            throw new runtime.RequiredError(
                'customerTeamId',
                'Required parameter "customerTeamId" was null or undefined when calling customerTeamsCustomerTeamIdTagsPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/customer-teams/{customer_team_id}/tags`.replace(`{${"customer_team_id"}}`, encodeURIComponent(String(requestParameters['customerTeamId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * customer-teams-customer-team-id-tags-put
     */
    async customerTeamsCustomerTeamIdTagsPut(requestParameters: CustomerTeamsCustomerTeamIdTagsPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.customerTeamsCustomerTeamIdTagsPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * customer-teams-customer-team-id-tags-tag-id-delete
     */
    async customerTeamsCustomerTeamIdTagsTagIdDeleteRaw(requestParameters: CustomerTeamsCustomerTeamIdTagsTagIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['customerTeamId'] == null) {
            throw new runtime.RequiredError(
                'customerTeamId',
                'Required parameter "customerTeamId" was null or undefined when calling customerTeamsCustomerTeamIdTagsTagIdDelete().'
            );
        }

        if (requestParameters['tagId'] == null) {
            throw new runtime.RequiredError(
                'tagId',
                'Required parameter "tagId" was null or undefined when calling customerTeamsCustomerTeamIdTagsTagIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/customer-teams/{customer_team_id}/tags/{tag_id}`.replace(`{${"customer_team_id"}}`, encodeURIComponent(String(requestParameters['customerTeamId']))).replace(`{${"tag_id"}}`, encodeURIComponent(String(requestParameters['tagId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * customer-teams-customer-team-id-tags-tag-id-delete
     */
    async customerTeamsCustomerTeamIdTagsTagIdDelete(requestParameters: CustomerTeamsCustomerTeamIdTagsTagIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.customerTeamsCustomerTeamIdTagsTagIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * orders-order-id-tags-tag-id-delete
     */
    async ordersOrderIdTagsTagIdDeleteRaw(requestParameters: OrdersOrderIdTagsTagIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['orderId'] == null) {
            throw new runtime.RequiredError(
                'orderId',
                'Required parameter "orderId" was null or undefined when calling ordersOrderIdTagsTagIdDelete().'
            );
        }

        if (requestParameters['tagId'] == null) {
            throw new runtime.RequiredError(
                'tagId',
                'Required parameter "tagId" was null or undefined when calling ordersOrderIdTagsTagIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/orders/{order_id}/tags/{tag_id}`.replace(`{${"order_id"}}`, encodeURIComponent(String(requestParameters['orderId']))).replace(`{${"tag_id"}}`, encodeURIComponent(String(requestParameters['tagId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * orders-order-id-tags-tag-id-delete
     */
    async ordersOrderIdTagsTagIdDelete(requestParameters: OrdersOrderIdTagsTagIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.ordersOrderIdTagsTagIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * tags-post
     */
    async tagsPostRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/tags`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * tags-post
     */
    async tagsPost(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.tagsPostRaw(initOverrides);
        return await response.value();
    }

    /**
     * tags-tag-id-put
     */
    async tagsTagIdPutRaw(requestParameters: TagsTagIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['tagId'] == null) {
            throw new runtime.RequiredError(
                'tagId',
                'Required parameter "tagId" was null or undefined when calling tagsTagIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/tags/{tag_id}`.replace(`{${"tag_id"}}`, encodeURIComponent(String(requestParameters['tagId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * tags-tag-id-put
     */
    async tagsTagIdPut(requestParameters: TagsTagIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.tagsTagIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
