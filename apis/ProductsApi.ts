/* tslint:disable */
/* eslint-disable */
/**
 * Aryeo
 * # Introduction The Aryeo API provides access to the Aryeo platform.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: jarrodp@zillowgroup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiError403,
  ApiError404,
  ApiError500,
  ApiFail422,
  CouponCollection,
  DiscountPostPayload,
  DiscountResource,
  ProductCategoryCollection,
  ProductCollection,
  TaxPostPayload,
  TaxResource,
  TerritoryCollection,
} from '../models/index';
import {
    ApiError403FromJSON,
    ApiError403ToJSON,
    ApiError404FromJSON,
    ApiError404ToJSON,
    ApiError500FromJSON,
    ApiError500ToJSON,
    ApiFail422FromJSON,
    ApiFail422ToJSON,
    CouponCollectionFromJSON,
    CouponCollectionToJSON,
    DiscountPostPayloadFromJSON,
    DiscountPostPayloadToJSON,
    DiscountResourceFromJSON,
    DiscountResourceToJSON,
    ProductCategoryCollectionFromJSON,
    ProductCategoryCollectionToJSON,
    ProductCollectionFromJSON,
    ProductCollectionToJSON,
    TaxPostPayloadFromJSON,
    TaxPostPayloadToJSON,
    TaxResourceFromJSON,
    TaxResourceToJSON,
    TerritoryCollectionFromJSON,
    TerritoryCollectionToJSON,
} from '../models/index';

export interface DeleteDiscountsDiscountIdRequest {
    discountId: string;
    aryeoGroupId: string;
}

export interface DeleteTaxesTaxIdRequest {
    taxId: string;
    aryeoGroupId: string;
}

export interface GetCouponsRequest {
    aryeoGroupId: string;
    filterSearch?: string;
    include?: string;
    sort?: string;
    perPage?: string;
    page?: string;
}

export interface GetProductCategoriesRequest {
    aryeoGroupId: string;
    sort?: string;
    perPage?: string;
    page?: string;
    filterSearch?: string;
}

export interface GetProductsRequest {
    aryeoGroupId: string;
    sort?: string;
    perPage?: string;
    page?: string;
    filterSearch?: string;
    filterIncludeInactive?: boolean;
    filterCategoryIds?: Array<string>;
    filterType?: string;
}

export interface GetTerritoriesRequest {
    aryeoGroupId: string;
    filterAddressId?: string;
}

export interface PostDiscountsRequest {
    aryeoGroupId?: string;
    discountPostPayload?: DiscountPostPayload;
}

export interface PostTaxesRequest {
    aryeoGroupId?: string;
    taxPostPayload?: TaxPostPayload;
}

/**
 * 
 */
export class ProductsApi extends runtime.BaseAPI {

    /**
     * Delete a discount.
     */
    async deleteDiscountsDiscountIdRaw(requestParameters: DeleteDiscountsDiscountIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['discountId'] == null) {
            throw new runtime.RequiredError(
                'discountId',
                'Required parameter "discountId" was null or undefined when calling deleteDiscountsDiscountId().'
            );
        }

        if (requestParameters['aryeoGroupId'] == null) {
            throw new runtime.RequiredError(
                'aryeoGroupId',
                'Required parameter "aryeoGroupId" was null or undefined when calling deleteDiscountsDiscountId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['aryeoGroupId'] != null) {
            headerParameters['Aryeo-Group-Id'] = String(requestParameters['aryeoGroupId']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/discounts/{discount_id}`.replace(`{${"discount_id"}}`, encodeURIComponent(String(requestParameters['discountId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a discount.
     */
    async deleteDiscountsDiscountId(requestParameters: DeleteDiscountsDiscountIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteDiscountsDiscountIdRaw(requestParameters, initOverrides);
    }

    /**
     * Delete a tax.
     */
    async deleteTaxesTaxIdRaw(requestParameters: DeleteTaxesTaxIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['taxId'] == null) {
            throw new runtime.RequiredError(
                'taxId',
                'Required parameter "taxId" was null or undefined when calling deleteTaxesTaxId().'
            );
        }

        if (requestParameters['aryeoGroupId'] == null) {
            throw new runtime.RequiredError(
                'aryeoGroupId',
                'Required parameter "aryeoGroupId" was null or undefined when calling deleteTaxesTaxId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['aryeoGroupId'] != null) {
            headerParameters['Aryeo-Group-Id'] = String(requestParameters['aryeoGroupId']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/taxes/{tax_id}`.replace(`{${"tax_id"}}`, encodeURIComponent(String(requestParameters['taxId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a tax.
     */
    async deleteTaxesTaxId(requestParameters: DeleteTaxesTaxIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteTaxesTaxIdRaw(requestParameters, initOverrides);
    }

    /**
     * List all coupons.
     */
    async getCouponsRaw(requestParameters: GetCouponsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CouponCollection>> {
        if (requestParameters['aryeoGroupId'] == null) {
            throw new runtime.RequiredError(
                'aryeoGroupId',
                'Required parameter "aryeoGroupId" was null or undefined when calling getCoupons().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['filterSearch'] != null) {
            queryParameters['filter[search]'] = requestParameters['filterSearch'];
        }

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        if (requestParameters['perPage'] != null) {
            queryParameters['per_page'] = requestParameters['perPage'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['aryeoGroupId'] != null) {
            headerParameters['Aryeo-Group-Id'] = String(requestParameters['aryeoGroupId']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/coupons`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CouponCollectionFromJSON(jsonValue));
    }

    /**
     * List all coupons.
     */
    async getCoupons(requestParameters: GetCouponsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CouponCollection> {
        const response = await this.getCouponsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all product categories of a company.
     */
    async getProductCategoriesRaw(requestParameters: GetProductCategoriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductCategoryCollection>> {
        if (requestParameters['aryeoGroupId'] == null) {
            throw new runtime.RequiredError(
                'aryeoGroupId',
                'Required parameter "aryeoGroupId" was null or undefined when calling getProductCategories().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        if (requestParameters['perPage'] != null) {
            queryParameters['per_page'] = requestParameters['perPage'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['filterSearch'] != null) {
            queryParameters['filter[search]'] = requestParameters['filterSearch'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['aryeoGroupId'] != null) {
            headerParameters['Aryeo-Group-Id'] = String(requestParameters['aryeoGroupId']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/product-categories`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductCategoryCollectionFromJSON(jsonValue));
    }

    /**
     * List all product categories of a company.
     */
    async getProductCategories(requestParameters: GetProductCategoriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductCategoryCollection> {
        const response = await this.getProductCategoriesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all products of a group.
     */
    async getProductsRaw(requestParameters: GetProductsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductCollection>> {
        if (requestParameters['aryeoGroupId'] == null) {
            throw new runtime.RequiredError(
                'aryeoGroupId',
                'Required parameter "aryeoGroupId" was null or undefined when calling getProducts().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        if (requestParameters['perPage'] != null) {
            queryParameters['per_page'] = requestParameters['perPage'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['filterSearch'] != null) {
            queryParameters['filter[search]'] = requestParameters['filterSearch'];
        }

        if (requestParameters['filterIncludeInactive'] != null) {
            queryParameters['filter[include_inactive]'] = requestParameters['filterIncludeInactive'];
        }

        if (requestParameters['filterCategoryIds'] != null) {
            queryParameters['filter[category_ids][]'] = requestParameters['filterCategoryIds']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['filterType'] != null) {
            queryParameters['filter[type]'] = requestParameters['filterType'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['aryeoGroupId'] != null) {
            headerParameters['Aryeo-Group-Id'] = String(requestParameters['aryeoGroupId']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/products`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductCollectionFromJSON(jsonValue));
    }

    /**
     * List all products of a group.
     */
    async getProducts(requestParameters: GetProductsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductCollection> {
        const response = await this.getProductsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all territories.
     */
    async getTerritoriesRaw(requestParameters: GetTerritoriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TerritoryCollection>> {
        if (requestParameters['aryeoGroupId'] == null) {
            throw new runtime.RequiredError(
                'aryeoGroupId',
                'Required parameter "aryeoGroupId" was null or undefined when calling getTerritories().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['filterAddressId'] != null) {
            queryParameters['filter[address_id]'] = requestParameters['filterAddressId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['aryeoGroupId'] != null) {
            headerParameters['Aryeo-Group-Id'] = String(requestParameters['aryeoGroupId']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/territories`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TerritoryCollectionFromJSON(jsonValue));
    }

    /**
     * List all territories.
     */
    async getTerritories(requestParameters: GetTerritoriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TerritoryCollection> {
        const response = await this.getTerritoriesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a discount.
     */
    async postDiscountsRaw(requestParameters: PostDiscountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DiscountResource>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['aryeoGroupId'] != null) {
            headerParameters['Aryeo-Group-Id'] = String(requestParameters['aryeoGroupId']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/discounts`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DiscountPostPayloadToJSON(requestParameters['discountPostPayload']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DiscountResourceFromJSON(jsonValue));
    }

    /**
     * Create a discount.
     */
    async postDiscounts(requestParameters: PostDiscountsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DiscountResource> {
        const response = await this.postDiscountsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a tax.
     */
    async postTaxesRaw(requestParameters: PostTaxesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TaxResource>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['aryeoGroupId'] != null) {
            headerParameters['Aryeo-Group-Id'] = String(requestParameters['aryeoGroupId']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/taxes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TaxPostPayloadToJSON(requestParameters['taxPostPayload']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TaxResourceFromJSON(jsonValue));
    }

    /**
     * Create a tax.
     */
    async postTaxes(requestParameters: PostTaxesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TaxResource> {
        const response = await this.postTaxesRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
