/* tslint:disable */
/* eslint-disable */
/**
 * Aryeo
 * # Introduction The Aryeo API provides access to the Aryeo platform.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: jarrodp@zillowgroup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiError403,
  ApiError404,
  ApiError500,
  ApiFail422,
  OrderFormCollection,
  OrderFormSessionPostPayload,
  OrderFormSessionResource,
} from '../models/index';
import {
    ApiError403FromJSON,
    ApiError403ToJSON,
    ApiError404FromJSON,
    ApiError404ToJSON,
    ApiError500FromJSON,
    ApiError500ToJSON,
    ApiFail422FromJSON,
    ApiFail422ToJSON,
    OrderFormCollectionFromJSON,
    OrderFormCollectionToJSON,
    OrderFormSessionPostPayloadFromJSON,
    OrderFormSessionPostPayloadToJSON,
    OrderFormSessionResourceFromJSON,
    OrderFormSessionResourceToJSON,
} from '../models/index';

export interface GetOrderFormsRequest {
    aryeoGroupId: string;
}

export interface PostOrderFormSessionsRequest {
    aryeoGroupId: string;
    orderFormSessionPostPayload?: OrderFormSessionPostPayload;
}

/**
 * 
 */
export class OrderFormsApi extends runtime.BaseAPI {

    /**
     * Lists all order forms for the current group.
     */
    async getOrderFormsRaw(requestParameters: GetOrderFormsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrderFormCollection>> {
        if (requestParameters['aryeoGroupId'] == null) {
            throw new runtime.RequiredError(
                'aryeoGroupId',
                'Required parameter "aryeoGroupId" was null or undefined when calling getOrderForms().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['aryeoGroupId'] != null) {
            headerParameters['Aryeo-Group-Id'] = String(requestParameters['aryeoGroupId']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/order-forms`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderFormCollectionFromJSON(jsonValue));
    }

    /**
     * Lists all order forms for the current group.
     */
    async getOrderForms(requestParameters: GetOrderFormsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrderFormCollection> {
        const response = await this.getOrderFormsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create an order form session
     */
    async postOrderFormSessionsRaw(requestParameters: PostOrderFormSessionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrderFormSessionResource>> {
        if (requestParameters['aryeoGroupId'] == null) {
            throw new runtime.RequiredError(
                'aryeoGroupId',
                'Required parameter "aryeoGroupId" was null or undefined when calling postOrderFormSessions().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['aryeoGroupId'] != null) {
            headerParameters['Aryeo-Group-Id'] = String(requestParameters['aryeoGroupId']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/order-form-sessions`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OrderFormSessionPostPayloadToJSON(requestParameters['orderFormSessionPostPayload']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderFormSessionResourceFromJSON(jsonValue));
    }

    /**
     * Create an order form session
     */
    async postOrderFormSessions(requestParameters: PostOrderFormSessionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrderFormSessionResource> {
        const response = await this.postOrderFormSessionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
