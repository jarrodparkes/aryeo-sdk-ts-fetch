/* tslint:disable */
/* eslint-disable */
/**
 * Aryeo
 * # Introduction The Aryeo API provides access to the Aryeo platform.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: jarrodp@zillowgroup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * A street address and additional metadata about a location.
 * @export
 * @interface Address
 */
export interface Address {
    /**
     * ID of the address. UUID Version 4.
     * @type {string}
     * @memberof Address
     */
    id: string;
    /**
     * The geographic latitude of some reference point of the location, specified in degrees and decimal parts. Positive numbers must not include the plus symbol.
     * @type {number}
     * @memberof Address
     */
    latitude?: number | null;
    /**
     * The geographic longitude of some reference point of the location, specified in degrees and decimal parts. Positive numbers must not include the plus symbol.
     * @type {number}
     * @memberof Address
     */
    longitude?: number | null;
    /**
     * The street number portion of a location's address. In some areas, the street number may contain non-numeric characters. This field can also contain extensions and modifiers to the street number, such as '1/2' or '-B'.
     * @type {string}
     * @memberof Address
     */
    streetNumber?: string | null;
    /**
     * The street name portion of a location's address.
     * @type {string}
     * @memberof Address
     */
    streetName?: string | null;
    /**
     * The number or portion of a larger building or complex. Examples are: 'APT G', '55', etc.
     * @type {string}
     * @memberof Address
     */
    unitNumber?: string | null;
    /**
     * The postal code portion of a location's address.
     * @type {string}
     * @memberof Address
     */
    postalCode?: string | null;
    /**
     * The city of a location's address.
     * @type {string}
     * @memberof Address
     */
    city?: string | null;
    /**
     * A sub-section or area of a defined city. Examples would be SoHo in New York, NY, Ironbound in Newark, NJ or Inside the Beltway.
     * @type {string}
     * @memberof Address
     */
    cityRegion?: string | null;
    /**
     * The County, Parish or other regional authority of the location.
     * @type {string}
     * @memberof Address
     */
    countyOrParish?: string | null;
    /**
     * The ISO 3166-2 subdivision code for the state or province of the location. For example, “MA” for Massachusetts, United States.
     * @type {string}
     * @memberof Address
     */
    stateOrProvince?: string | null;
    /**
     * A sub-section or area of a defined state or province. Examples would be the Keys in FL or Hudson Valley in NY.
     * @type {string}
     * @memberof Address
     */
    stateOrProvinceRegion?: string | null;
    /**
     * The ISO 3166-1 country code for this for the country of the location.
     * @type {string}
     * @memberof Address
     */
    country?: string | null;
    /**
     * A sub-section or area of a defined country. Examples would be Napa Valley in the US, or the Amalfi Coast in Italy.
     * @type {string}
     * @memberof Address
     */
    countryRegion?: string | null;
    /**
     * The assumed timezone the address is located in.
     * @type {string}
     * @memberof Address
     */
    timezone?: string | null;
    /**
     * Unparsed text representation of the address. 
     * @type {string}
     * @memberof Address
     */
    unparsedAddress?: string | null;
    /**
     * Unparsed text representation of the first part of the address, typically including the street number, street name, and unit number if applicable.  
     * @type {string}
     * @memberof Address
     */
    unparsedAddressPartOne?: string | null;
    /**
     * Unparsed text representation of the second part of the address, typically including the city, state or province, and postal code.  
     * @type {string}
     * @memberof Address
     */
    unparsedAddressPartTwo?: string | null;
}

/**
 * Check if a given object implements the Address interface.
 */
export function instanceOfAddress(value: object): value is Address {
    if (!('id' in value) || value['id'] === undefined) return false;
    return true;
}

export function AddressFromJSON(json: any): Address {
    return AddressFromJSONTyped(json, false);
}

export function AddressFromJSONTyped(json: any, ignoreDiscriminator: boolean): Address {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'latitude': json['latitude'] == null ? undefined : json['latitude'],
        'longitude': json['longitude'] == null ? undefined : json['longitude'],
        'streetNumber': json['street_number'] == null ? undefined : json['street_number'],
        'streetName': json['street_name'] == null ? undefined : json['street_name'],
        'unitNumber': json['unit_number'] == null ? undefined : json['unit_number'],
        'postalCode': json['postal_code'] == null ? undefined : json['postal_code'],
        'city': json['city'] == null ? undefined : json['city'],
        'cityRegion': json['city_region'] == null ? undefined : json['city_region'],
        'countyOrParish': json['county_or_parish'] == null ? undefined : json['county_or_parish'],
        'stateOrProvince': json['state_or_province'] == null ? undefined : json['state_or_province'],
        'stateOrProvinceRegion': json['state_or_province_region'] == null ? undefined : json['state_or_province_region'],
        'country': json['country'] == null ? undefined : json['country'],
        'countryRegion': json['country_region'] == null ? undefined : json['country_region'],
        'timezone': json['timezone'] == null ? undefined : json['timezone'],
        'unparsedAddress': json['unparsed_address'] == null ? undefined : json['unparsed_address'],
        'unparsedAddressPartOne': json['unparsed_address_part_one'] == null ? undefined : json['unparsed_address_part_one'],
        'unparsedAddressPartTwo': json['unparsed_address_part_two'] == null ? undefined : json['unparsed_address_part_two'],
    };
}

export function AddressToJSON(json: any): Address {
    return AddressToJSONTyped(json, false);
}

export function AddressToJSONTyped(value?: Address | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'latitude': value['latitude'],
        'longitude': value['longitude'],
        'street_number': value['streetNumber'],
        'street_name': value['streetName'],
        'unit_number': value['unitNumber'],
        'postal_code': value['postalCode'],
        'city': value['city'],
        'city_region': value['cityRegion'],
        'county_or_parish': value['countyOrParish'],
        'state_or_province': value['stateOrProvince'],
        'state_or_province_region': value['stateOrProvinceRegion'],
        'country': value['country'],
        'country_region': value['countryRegion'],
        'timezone': value['timezone'],
        'unparsed_address': value['unparsedAddress'],
        'unparsed_address_part_one': value['unparsedAddressPartOne'],
        'unparsed_address_part_two': value['unparsedAddressPartTwo'],
    };
}

