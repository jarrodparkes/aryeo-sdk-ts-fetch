/* tslint:disable */
/* eslint-disable */
/**
 * Aryeo
 * # Introduction The Aryeo API provides access to the Aryeo platform.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: jarrodp@zillowgroup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Appointment } from './Appointment';
import {
    AppointmentFromJSON,
    AppointmentFromJSONTyped,
    AppointmentToJSON,
    AppointmentToJSONTyped,
} from './Appointment';
import type { Order } from './Order';
import {
    OrderFromJSON,
    OrderFromJSONTyped,
    OrderToJSON,
    OrderToJSONTyped,
} from './Order';
import type { Group } from './Group';
import {
    GroupFromJSON,
    GroupFromJSONTyped,
    GroupToJSON,
    GroupToJSONTyped,
} from './Group';
import type { Address } from './Address';
import {
    AddressFromJSON,
    AddressFromJSONTyped,
    AddressToJSON,
    AddressToJSONTyped,
} from './Address';
import type { MarketingMaterial } from './MarketingMaterial';
import {
    MarketingMaterialFromJSON,
    MarketingMaterialFromJSONTyped,
    MarketingMaterialToJSON,
    MarketingMaterialToJSONTyped,
} from './MarketingMaterial';
import type { ListingLot } from './ListingLot';
import {
    ListingLotFromJSON,
    ListingLotFromJSONTyped,
    ListingLotToJSON,
    ListingLotToJSONTyped,
} from './ListingLot';
import type { PropertyWebsite } from './PropertyWebsite';
import {
    PropertyWebsiteFromJSON,
    PropertyWebsiteFromJSONTyped,
    PropertyWebsiteToJSON,
    PropertyWebsiteToJSONTyped,
} from './PropertyWebsite';
import type { FloorPlan } from './FloorPlan';
import {
    FloorPlanFromJSON,
    FloorPlanFromJSONTyped,
    FloorPlanToJSON,
    FloorPlanToJSONTyped,
} from './FloorPlan';
import type { Image } from './Image';
import {
    ImageFromJSON,
    ImageFromJSONTyped,
    ImageToJSON,
    ImageToJSONTyped,
} from './Image';
import type { ListingPrice } from './ListingPrice';
import {
    ListingPriceFromJSON,
    ListingPriceFromJSONTyped,
    ListingPriceToJSON,
    ListingPriceToJSONTyped,
} from './ListingPrice';
import type { Video } from './Video';
import {
    VideoFromJSON,
    VideoFromJSONTyped,
    VideoToJSON,
    VideoToJSONTyped,
} from './Video';
import type { ListingBuilding } from './ListingBuilding';
import {
    ListingBuildingFromJSON,
    ListingBuildingFromJSONTyped,
    ListingBuildingToJSON,
    ListingBuildingToJSONTyped,
} from './ListingBuilding';
import type { InteractiveContent } from './InteractiveContent';
import {
    InteractiveContentFromJSON,
    InteractiveContentFromJSONTyped,
    InteractiveContentToJSON,
    InteractiveContentToJSONTyped,
} from './InteractiveContent';

/**
 * A real estate listing.
 * @export
 * @interface Listing
 */
export interface Listing {
    /**
     * String representing the objectâ€™s type. Objects of the same type share the same schema.
     * @type {string}
     * @memberof Listing
     */
    object: string;
    /**
     * ID of the listing. UUID Version 4.
     * @type {string}
     * @memberof Listing
     */
    id: string;
    /**
     * 
     * @type {Address}
     * @memberof Listing
     */
    address: Address;
    /**
     * The identifier for a listing on its local MLS. 
     * @type {string}
     * @memberof Listing
     */
    mlsNumber?: string | null;
    /**
     * General type of the listing, primarily categorizing its use case. Examples include residential and commercial. 
     * @type {string}
     * @memberof Listing
     */
    type?: ListingTypeEnum | null;
    /**
     * Further specifies the listing type. Examples include family residence and condominium.
     * @type {string}
     * @memberof Listing
     */
    subType?: ListingSubTypeEnum | null;
    /**
     * Local, regional, or otherwise custom status for the listing used by the parties involved in the listing transaction. While variable, these statuses are typically mapped to the listing's standard status.
     * @type {string}
     * @memberof Listing
     */
    status?: ListingStatusEnum | null;
    /**
     * The status of the listing as it reflects the state of the contract between the listing agent and seller or an agreement with a buyer, including Active, Active Under Contract, Canceled, Closed, Expired, Pending, and Withdrawn.
     * @type {string}
     * @memberof Listing
     */
    standardStatus?: ListingStandardStatusEnum | null;
    /**
     * A URL for a thumbnail representing the listing.
     * @type {string}
     * @memberof Listing
     */
    thumbnailUrl?: string | null;
    /**
     * A URL for a large thumbnail representing the listing.
     * @type {string}
     * @memberof Listing
     */
    largeThumbnailUrl?: string | null;
    /**
     * Description of the selling points of the building and/or land for sale. 
     * @type {string}
     * @memberof Listing
     */
    description?: string | null;
    /**
     * 
     * @type {ListingLot}
     * @memberof Listing
     */
    lot?: ListingLot;
    /**
     * 
     * @type {ListingBuilding}
     * @memberof Listing
     */
    building?: ListingBuilding;
    /**
     * 
     * @type {ListingPrice}
     * @memberof Listing
     */
    price?: ListingPrice;
    /**
     * 
     * @type {Group}
     * @memberof Listing
     */
    listAgent?: Group;
    /**
     * 
     * @type {Group}
     * @memberof Listing
     */
    coListAgent?: Group;
    /**
     * images
     * @type {Array<Image>}
     * @memberof Listing
     */
    images?: Array<Image>;
    /**
     * videos
     * @type {Array<Video>}
     * @memberof Listing
     */
    videos?: Array<Video>;
    /**
     * floor_plans
     * @type {Array<FloorPlan>}
     * @memberof Listing
     */
    floorPlans?: Array<FloorPlan>;
    /**
     * interactive_content
     * @type {Array<InteractiveContent>}
     * @memberof Listing
     */
    interactiveContent?: Array<InteractiveContent>;
    /**
     * 
     * @type {PropertyWebsite}
     * @memberof Listing
     */
    propertyWebsite?: PropertyWebsite;
    /**
     * Marketing materials for this listing. 
     * @type {Array<MarketingMaterial>}
     * @memberof Listing
     */
    marketingMaterials?: Array<MarketingMaterial>;
    /**
     * orders
     * @type {Array<Order>}
     * @memberof Listing
     */
    orders?: Array<Order>;
    /**
     * 
     * @type {Array<Appointment>}
     * @memberof Listing
     */
    appointments?: Array<Appointment>;
    /**
     * 
     * @type {Array<Appointment>}
     * @memberof Listing
     */
    unconfirmedAppointments?: Array<Appointment>;
    /**
     * Are downloads enabled for this listing?
     * @type {boolean}
     * @memberof Listing
     */
    downloadsEnabled: boolean;
    /**
     * Indicates if this is a Showcase listing
     * @type {boolean}
     * @memberof Listing
     */
    isShowcase?: boolean;
}


/**
 * @export
 */
export const ListingTypeEnum = {
    BusinessOpportunity: 'BUSINESS_OPPORTUNITY',
    CommercialLease: 'COMMERCIAL_LEASE',
    CommercialSale: 'COMMERCIAL_SALE',
    Farm: 'FARM',
    Land: 'LAND',
    ManufacturedInPark: 'MANUFACTURED_IN_PARK',
    Residential: 'RESIDENTIAL',
    ResidentialIncome: 'RESIDENTIAL_INCOME',
    ResidentialLease: 'RESIDENTIAL_LEASE'
} as const;
export type ListingTypeEnum = typeof ListingTypeEnum[keyof typeof ListingTypeEnum];

/**
 * @export
 */
export const ListingSubTypeEnum = {
    Apartment: 'APARTMENT',
    Condominium: 'CONDOMINIUM',
    Duplex: 'DUPLEX',
    Farm: 'FARM',
    SingleFamilyResidence: 'SINGLE_FAMILY_RESIDENCE',
    Timeshare: 'TIMESHARE',
    Townhouse: 'TOWNHOUSE',
    Office: 'OFFICE'
} as const;
export type ListingSubTypeEnum = typeof ListingSubTypeEnum[keyof typeof ListingSubTypeEnum];

/**
 * @export
 */
export const ListingStatusEnum = {
    Draft: 'DRAFT',
    ComingSoon: 'COMING_SOON',
    ForSale: 'FOR_SALE',
    ForLease: 'FOR_LEASE',
    PendingSale: 'PENDING_SALE',
    PendingLease: 'PENDING_LEASE',
    Sold: 'SOLD',
    Leased: 'LEASED',
    OffMarket: 'OFF_MARKET'
} as const;
export type ListingStatusEnum = typeof ListingStatusEnum[keyof typeof ListingStatusEnum];

/**
 * @export
 */
export const ListingStandardStatusEnum = {
    Active: 'ACTIVE',
    ActiveUnderContract: 'ACTIVE_UNDER_CONTRACT',
    Canceled: 'CANCELED',
    Closed: 'CLOSED',
    ComingSoon: 'COMING_SOON',
    Delete: 'DELETE',
    Expired: 'EXPIRED',
    Hold: 'HOLD',
    Incomplete: 'INCOMPLETE',
    Pending: 'PENDING',
    Withdrawn: 'WITHDRAWN'
} as const;
export type ListingStandardStatusEnum = typeof ListingStandardStatusEnum[keyof typeof ListingStandardStatusEnum];


/**
 * Check if a given object implements the Listing interface.
 */
export function instanceOfListing(value: object): value is Listing {
    if (!('object' in value) || value['object'] === undefined) return false;
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('address' in value) || value['address'] === undefined) return false;
    if (!('downloadsEnabled' in value) || value['downloadsEnabled'] === undefined) return false;
    return true;
}

export function ListingFromJSON(json: any): Listing {
    return ListingFromJSONTyped(json, false);
}

export function ListingFromJSONTyped(json: any, ignoreDiscriminator: boolean): Listing {
    if (json == null) {
        return json;
    }
    return {
        
        'object': json['object'],
        'id': json['id'],
        'address': AddressFromJSON(json['address']),
        'mlsNumber': json['mls_number'] == null ? undefined : json['mls_number'],
        'type': json['type'] == null ? undefined : json['type'],
        'subType': json['sub_type'] == null ? undefined : json['sub_type'],
        'status': json['status'] == null ? undefined : json['status'],
        'standardStatus': json['standard_status'] == null ? undefined : json['standard_status'],
        'thumbnailUrl': json['thumbnail_url'] == null ? undefined : json['thumbnail_url'],
        'largeThumbnailUrl': json['large_thumbnail_url'] == null ? undefined : json['large_thumbnail_url'],
        'description': json['description'] == null ? undefined : json['description'],
        'lot': json['lot'] == null ? undefined : ListingLotFromJSON(json['lot']),
        'building': json['building'] == null ? undefined : ListingBuildingFromJSON(json['building']),
        'price': json['price'] == null ? undefined : ListingPriceFromJSON(json['price']),
        'listAgent': json['list_agent'] == null ? undefined : GroupFromJSON(json['list_agent']),
        'coListAgent': json['co_list_agent'] == null ? undefined : GroupFromJSON(json['co_list_agent']),
        'images': json['images'] == null ? undefined : ((json['images'] as Array<any>).map(ImageFromJSON)),
        'videos': json['videos'] == null ? undefined : ((json['videos'] as Array<any>).map(VideoFromJSON)),
        'floorPlans': json['floor_plans'] == null ? undefined : ((json['floor_plans'] as Array<any>).map(FloorPlanFromJSON)),
        'interactiveContent': json['interactive_content'] == null ? undefined : ((json['interactive_content'] as Array<any>).map(InteractiveContentFromJSON)),
        'propertyWebsite': json['property_website'] == null ? undefined : PropertyWebsiteFromJSON(json['property_website']),
        'marketingMaterials': json['marketing_materials'] == null ? undefined : ((json['marketing_materials'] as Array<any>).map(MarketingMaterialFromJSON)),
        'orders': json['orders'] == null ? undefined : ((json['orders'] as Array<any>).map(OrderFromJSON)),
        'appointments': json['appointments'] == null ? undefined : ((json['appointments'] as Array<any>).map(AppointmentFromJSON)),
        'unconfirmedAppointments': json['unconfirmed_appointments'] == null ? undefined : ((json['unconfirmed_appointments'] as Array<any>).map(AppointmentFromJSON)),
        'downloadsEnabled': json['downloads_enabled'],
        'isShowcase': json['is_showcase'] == null ? undefined : json['is_showcase'],
    };
}

export function ListingToJSON(json: any): Listing {
    return ListingToJSONTyped(json, false);
}

export function ListingToJSONTyped(value?: Listing | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'object': value['object'],
        'id': value['id'],
        'address': AddressToJSON(value['address']),
        'mls_number': value['mlsNumber'],
        'type': value['type'],
        'sub_type': value['subType'],
        'status': value['status'],
        'standard_status': value['standardStatus'],
        'thumbnail_url': value['thumbnailUrl'],
        'large_thumbnail_url': value['largeThumbnailUrl'],
        'description': value['description'],
        'lot': ListingLotToJSON(value['lot']),
        'building': ListingBuildingToJSON(value['building']),
        'price': ListingPriceToJSON(value['price']),
        'list_agent': GroupToJSON(value['listAgent']),
        'co_list_agent': GroupToJSON(value['coListAgent']),
        'images': value['images'] == null ? undefined : ((value['images'] as Array<any>).map(ImageToJSON)),
        'videos': value['videos'] == null ? undefined : ((value['videos'] as Array<any>).map(VideoToJSON)),
        'floor_plans': value['floorPlans'] == null ? undefined : ((value['floorPlans'] as Array<any>).map(FloorPlanToJSON)),
        'interactive_content': value['interactiveContent'] == null ? undefined : ((value['interactiveContent'] as Array<any>).map(InteractiveContentToJSON)),
        'property_website': PropertyWebsiteToJSON(value['propertyWebsite']),
        'marketing_materials': value['marketingMaterials'] == null ? undefined : ((value['marketingMaterials'] as Array<any>).map(MarketingMaterialToJSON)),
        'orders': value['orders'] == null ? undefined : ((value['orders'] as Array<any>).map(OrderToJSON)),
        'appointments': value['appointments'] == null ? undefined : ((value['appointments'] as Array<any>).map(AppointmentToJSON)),
        'unconfirmed_appointments': value['unconfirmedAppointments'] == null ? undefined : ((value['unconfirmedAppointments'] as Array<any>).map(AppointmentToJSON)),
        'downloads_enabled': value['downloadsEnabled'],
        'is_showcase': value['isShowcase'],
    };
}

