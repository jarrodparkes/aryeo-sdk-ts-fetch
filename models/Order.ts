/* tslint:disable */
/* eslint-disable */
/**
 * Aryeo
 * # Introduction The Aryeo API provides access to the Aryeo platform.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: jarrodp@zillowgroup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Appointment } from './Appointment';
import {
    AppointmentFromJSON,
    AppointmentFromJSONTyped,
    AppointmentToJSON,
    AppointmentToJSONTyped,
} from './Appointment';
import type { Group } from './Group';
import {
    GroupFromJSON,
    GroupFromJSONTyped,
    GroupToJSON,
    GroupToJSONTyped,
} from './Group';
import type { Discount } from './Discount';
import {
    DiscountFromJSON,
    DiscountFromJSONTyped,
    DiscountToJSON,
    DiscountToJSONTyped,
} from './Discount';
import type { Address } from './Address';
import {
    AddressFromJSON,
    AddressFromJSONTyped,
    AddressToJSON,
    AddressToJSONTyped,
} from './Address';
import type { Listing } from './Listing';
import {
    ListingFromJSON,
    ListingFromJSONTyped,
    ListingToJSON,
    ListingToJSONTyped,
} from './Listing';
import type { OrderForm } from './OrderForm';
import {
    OrderFormFromJSON,
    OrderFormFromJSONTyped,
    OrderFormToJSON,
    OrderFormToJSONTyped,
} from './OrderForm';
import type { CustomerGroup } from './CustomerGroup';
import {
    CustomerGroupFromJSON,
    CustomerGroupFromJSONTyped,
    CustomerGroupToJSON,
    CustomerGroupToJSONTyped,
} from './CustomerGroup';
import type { OrderItem } from './OrderItem';
import {
    OrderItemFromJSON,
    OrderItemFromJSONTyped,
    OrderItemToJSON,
    OrderItemToJSONTyped,
} from './OrderItem';
import type { Tag } from './Tag';
import {
    TagFromJSON,
    TagFromJSONTyped,
    TagToJSON,
    TagToJSONTyped,
} from './Tag';

/**
 * A payment request for some content or service.
 * @export
 * @interface Order
 */
export interface Order {
    /**
     * ID of the order. UUID Version 4.
     * @type {string}
     * @memberof Order
     */
    id: string;
    /**
     * A vanity id used for internal tracking of orders for a given vendor.
     * @type {number}
     * @memberof Order
     */
    number?: number | null;
    /**
     * The title of the order, generated by combining the order's number property with the prefix 'Order #'.
     * @type {string}
     * @memberof Order
     */
    title: string;
    /**
     * The status of the order.
     * @type {string}
     * @memberof Order
     */
    status?: OrderStatusEnum;
    /**
     * The status of the order.
     * @type {string}
     * @memberof Order
     */
    orderStatus?: OrderOrderStatusEnum;
    /**
     * The fulfillment status of the order.
     * @type {string}
     * @memberof Order
     */
    fulfillmentStatus: OrderFulfillmentStatusEnum;
    /**
     * The payment status of the order.
     * @type {string}
     * @memberof Order
     */
    paymentStatus: OrderPaymentStatusEnum;
    /**
     * Internal order notes.
     * @type {string}
     * @memberof Order
     */
    internalNotes?: string | null;
    /**
     * The three-letter ISO 4217 currency code for the currency in which this order was or will be transacted. Must be a supported currency of Aryeo.
     * @type {string}
     * @memberof Order
     */
    currency?: OrderCurrencyEnum;
    /**
     * A positive integer in the smallest currency unit (that is, 100 cents for $1.00) representing the total order amount that was or will be charged. This accounts for order items and taxes. 
     * @type {number}
     * @memberof Order
     */
    totalAmount?: number;
    /**
     * A URL of a publicly-accessible webpage to pay for the order.
     * @type {string}
     * @memberof Order
     */
    paymentUrl?: string | null;
    /**
     * A URL of a publicly-accessible webpage to see the order's status.
     * @type {string}
     * @memberof Order
     */
    statusUrl: string | null;
    /**
     * A URL of a publicly-accessible pdf invoice of the order.
     * @type {string}
     * @memberof Order
     */
    invoiceUrl?: string | null;
    /**
     * Indicates if the current user is allowed to download content from the attached listing.
     * @type {boolean}
     * @memberof Order
     */
    downloadsAllowed: boolean;
    /**
     * Indicates if the current user is allowed to make a payment for the order.
     * @type {boolean}
     * @memberof Order
     */
    paymentsAllowed: boolean;
    /**
     * 
     * @type {Address}
     * @memberof Order
     */
    address?: Address;
    /**
     * 
     * @type {Group}
     * @memberof Order
     */
    customer?: Group;
    /**
     * 
     * @type {CustomerGroup}
     * @memberof Order
     */
    customerGroup?: CustomerGroup;
    /**
     * 
     * @type {Listing}
     * @memberof Order
     */
    listing?: Listing;
    /**
     * 
     * @type {OrderForm}
     * @memberof Order
     */
    orderForm?: OrderForm;
    /**
     * The list of discounts applied to the order.
     * @type {Array<Discount>}
     * @memberof Order
     */
    discounts?: Array<Discount>;
    /**
     * The list of tags applied to the order.
     * @type {Array<Tag>}
     * @memberof Order
     */
    tags?: Array<Tag>;
    /**
     * items
     * @type {Array<OrderItem>}
     * @memberof Order
     */
    items?: Array<OrderItem>;
    /**
     * 
     * @type {Array<Appointment>}
     * @memberof Order
     */
    appointments?: Array<Appointment>;
    /**
     * 
     * @type {Array<Appointment>}
     * @memberof Order
     */
    unconfirmedAppointments?: Array<Appointment>;
    /**
     * The date and time (ISO 8601 format) when the order was created.
     * @type {Date}
     * @memberof Order
     */
    createdAt: Date | null;
    /**
     * The date and time (ISO 8601 format) when the order was last updated.
     * @type {Date}
     * @memberof Order
     */
    updatedAt: Date | null;
}


/**
 * @export
 */
export const OrderStatusEnum = {
    Confirmed: 'CONFIRMED',
    Ghost: 'GHOST'
} as const;
export type OrderStatusEnum = typeof OrderStatusEnum[keyof typeof OrderStatusEnum];

/**
 * @export
 */
export const OrderOrderStatusEnum = {
    Draft: 'DRAFT',
    Open: 'OPEN',
    Canceled: 'CANCELED'
} as const;
export type OrderOrderStatusEnum = typeof OrderOrderStatusEnum[keyof typeof OrderOrderStatusEnum];

/**
 * @export
 */
export const OrderFulfillmentStatusEnum = {
    Fulfilled: 'FULFILLED',
    Unfulfilled: 'UNFULFILLED'
} as const;
export type OrderFulfillmentStatusEnum = typeof OrderFulfillmentStatusEnum[keyof typeof OrderFulfillmentStatusEnum];

/**
 * @export
 */
export const OrderPaymentStatusEnum = {
    Paid: 'PAID',
    PartiallyPaid: 'PARTIALLY_PAID',
    Unpaid: 'UNPAID'
} as const;
export type OrderPaymentStatusEnum = typeof OrderPaymentStatusEnum[keyof typeof OrderPaymentStatusEnum];

/**
 * @export
 */
export const OrderCurrencyEnum = {
    Usd: 'USD',
    Cad: 'CAD',
    Gbp: 'GBP',
    Chf: 'CHF',
    Eur: 'EUR',
    Aud: 'AUD',
    Nzd: 'NZD',
    Zar: 'ZAR'
} as const;
export type OrderCurrencyEnum = typeof OrderCurrencyEnum[keyof typeof OrderCurrencyEnum];


/**
 * Check if a given object implements the Order interface.
 */
export function instanceOfOrder(value: object): value is Order {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('title' in value) || value['title'] === undefined) return false;
    if (!('fulfillmentStatus' in value) || value['fulfillmentStatus'] === undefined) return false;
    if (!('paymentStatus' in value) || value['paymentStatus'] === undefined) return false;
    if (!('statusUrl' in value) || value['statusUrl'] === undefined) return false;
    if (!('downloadsAllowed' in value) || value['downloadsAllowed'] === undefined) return false;
    if (!('paymentsAllowed' in value) || value['paymentsAllowed'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('updatedAt' in value) || value['updatedAt'] === undefined) return false;
    return true;
}

export function OrderFromJSON(json: any): Order {
    return OrderFromJSONTyped(json, false);
}

export function OrderFromJSONTyped(json: any, ignoreDiscriminator: boolean): Order {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'number': json['number'] == null ? undefined : json['number'],
        'title': json['title'],
        'status': json['status'] == null ? undefined : json['status'],
        'orderStatus': json['order_status'] == null ? undefined : json['order_status'],
        'fulfillmentStatus': json['fulfillment_status'],
        'paymentStatus': json['payment_status'],
        'internalNotes': json['internal_notes'] == null ? undefined : json['internal_notes'],
        'currency': json['currency'] == null ? undefined : json['currency'],
        'totalAmount': json['total_amount'] == null ? undefined : json['total_amount'],
        'paymentUrl': json['payment_url'] == null ? undefined : json['payment_url'],
        'statusUrl': json['status_url'],
        'invoiceUrl': json['invoice_url'] == null ? undefined : json['invoice_url'],
        'downloadsAllowed': json['downloads_allowed'],
        'paymentsAllowed': json['payments_allowed'],
        'address': json['address'] == null ? undefined : AddressFromJSON(json['address']),
        'customer': json['customer'] == null ? undefined : GroupFromJSON(json['customer']),
        'customerGroup': json['customer_group'] == null ? undefined : CustomerGroupFromJSON(json['customer_group']),
        'listing': json['listing'] == null ? undefined : ListingFromJSON(json['listing']),
        'orderForm': json['order_form'] == null ? undefined : OrderFormFromJSON(json['order_form']),
        'discounts': json['discounts'] == null ? undefined : ((json['discounts'] as Array<any>).map(DiscountFromJSON)),
        'tags': json['tags'] == null ? undefined : ((json['tags'] as Array<any>).map(TagFromJSON)),
        'items': json['items'] == null ? undefined : ((json['items'] as Array<any>).map(OrderItemFromJSON)),
        'appointments': json['appointments'] == null ? undefined : ((json['appointments'] as Array<any>).map(AppointmentFromJSON)),
        'unconfirmedAppointments': json['unconfirmed_appointments'] == null ? undefined : ((json['unconfirmed_appointments'] as Array<any>).map(AppointmentFromJSON)),
        'createdAt': (json['created_at'] == null ? null : new Date(json['created_at'])),
        'updatedAt': (json['updated_at'] == null ? null : new Date(json['updated_at'])),
    };
}

export function OrderToJSON(json: any): Order {
    return OrderToJSONTyped(json, false);
}

export function OrderToJSONTyped(value?: Order | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'number': value['number'],
        'title': value['title'],
        'status': value['status'],
        'order_status': value['orderStatus'],
        'fulfillment_status': value['fulfillmentStatus'],
        'payment_status': value['paymentStatus'],
        'internal_notes': value['internalNotes'],
        'currency': value['currency'],
        'total_amount': value['totalAmount'],
        'payment_url': value['paymentUrl'],
        'status_url': value['statusUrl'],
        'invoice_url': value['invoiceUrl'],
        'downloads_allowed': value['downloadsAllowed'],
        'payments_allowed': value['paymentsAllowed'],
        'address': AddressToJSON(value['address']),
        'customer': GroupToJSON(value['customer']),
        'customer_group': CustomerGroupToJSON(value['customerGroup']),
        'listing': ListingToJSON(value['listing']),
        'order_form': OrderFormToJSON(value['orderForm']),
        'discounts': value['discounts'] == null ? undefined : ((value['discounts'] as Array<any>).map(DiscountToJSON)),
        'tags': value['tags'] == null ? undefined : ((value['tags'] as Array<any>).map(TagToJSON)),
        'items': value['items'] == null ? undefined : ((value['items'] as Array<any>).map(OrderItemToJSON)),
        'appointments': value['appointments'] == null ? undefined : ((value['appointments'] as Array<any>).map(AppointmentToJSON)),
        'unconfirmed_appointments': value['unconfirmedAppointments'] == null ? undefined : ((value['unconfirmedAppointments'] as Array<any>).map(AppointmentToJSON)),
        'created_at': (value['createdAt'] == null ? null : (value['createdAt'] as any).toISOString()),
        'updated_at': (value['updatedAt'] == null ? null : (value['updatedAt'] as any).toISOString()),
    };
}

