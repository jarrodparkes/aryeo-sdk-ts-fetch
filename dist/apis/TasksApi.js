"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Aryeo
 * # Introduction The Aryeo API provides access to the Aryeo platform.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: jarrodp@zillowgroup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TasksApi = void 0;
const runtime = require("../runtime");
/**
 *
 */
class TasksApi extends runtime.BaseAPI {
    /**
     * command-palette-commands-get
     */
    commandPaletteCommandsGetRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/command-palette/commands`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response);
        });
    }
    /**
     * command-palette-commands-get
     */
    commandPaletteCommandsGet(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.commandPaletteCommandsGetRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * tasks-get
     */
    tasksGetRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/tasks`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response);
        });
    }
    /**
     * tasks-get
     */
    tasksGet(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.tasksGetRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * tasks-post
     */
    tasksPostRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/tasks`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response);
        });
    }
    /**
     * tasks-post
     */
    tasksPost(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.tasksPostRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * tasks-task-id-complete-put
     */
    tasksTaskIdCompletePutRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['taskId'] == null) {
                throw new runtime.RequiredError('taskId', 'Required parameter "taskId" was null or undefined when calling tasksTaskIdCompletePut().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/tasks/{task_id}/complete`.replace(`{${"task_id"}}`, encodeURIComponent(String(requestParameters['taskId']))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response);
        });
    }
    /**
     * tasks-task-id-complete-put
     */
    tasksTaskIdCompletePut(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.tasksTaskIdCompletePutRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * tasks-task-id-delete
     */
    tasksTaskIdDeleteRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['taskId'] == null) {
                throw new runtime.RequiredError('taskId', 'Required parameter "taskId" was null or undefined when calling tasksTaskIdDelete().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/tasks/{task_id}`.replace(`{${"task_id"}}`, encodeURIComponent(String(requestParameters['taskId']))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response);
        });
    }
    /**
     * tasks-task-id-delete
     */
    tasksTaskIdDelete(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.tasksTaskIdDeleteRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * tasks-task-id-get
     */
    tasksTaskIdGetRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['taskId'] == null) {
                throw new runtime.RequiredError('taskId', 'Required parameter "taskId" was null or undefined when calling tasksTaskIdGet().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/tasks/{task_id}`.replace(`{${"task_id"}}`, encodeURIComponent(String(requestParameters['taskId']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response);
        });
    }
    /**
     * tasks-task-id-get
     */
    tasksTaskIdGet(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.tasksTaskIdGetRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * tasks-task-id-put
     */
    tasksTaskIdPutRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['taskId'] == null) {
                throw new runtime.RequiredError('taskId', 'Required parameter "taskId" was null or undefined when calling tasksTaskIdPut().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/tasks/{task_id}`.replace(`{${"task_id"}}`, encodeURIComponent(String(requestParameters['taskId']))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response);
        });
    }
    /**
     * tasks-task-id-put
     */
    tasksTaskIdPut(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.tasksTaskIdPutRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * tasks-task-id-reinstate-put
     */
    tasksTaskIdReinstatePutRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['taskId'] == null) {
                throw new runtime.RequiredError('taskId', 'Required parameter "taskId" was null or undefined when calling tasksTaskIdReinstatePut().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/tasks/{task_id}/reinstate`.replace(`{${"task_id"}}`, encodeURIComponent(String(requestParameters['taskId']))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response);
        });
    }
    /**
     * tasks-task-id-reinstate-put
     */
    tasksTaskIdReinstatePut(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.tasksTaskIdReinstatePutRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
}
exports.TasksApi = TasksApi;
