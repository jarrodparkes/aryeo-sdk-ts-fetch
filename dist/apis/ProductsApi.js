"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Aryeo
 * # Introduction The Aryeo API provides access to the Aryeo platform.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: jarrodp@zillowgroup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProductsApi = void 0;
const index_1 = require("../models/index");
const runtime = require("../runtime");
/**
 *
 */
class ProductsApi extends runtime.BaseAPI {
    /**
     * Delete a discount.
     */
    deleteDiscountsDiscountIdRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['discountId'] == null) {
                throw new runtime.RequiredError('discountId', 'Required parameter "discountId" was null or undefined when calling deleteDiscountsDiscountId().');
            }
            if (requestParameters['aryeoGroupId'] == null) {
                throw new runtime.RequiredError('aryeoGroupId', 'Required parameter "aryeoGroupId" was null or undefined when calling deleteDiscountsDiscountId().');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters['aryeoGroupId'] != null) {
                headerParameters['Aryeo-Group-Id'] = String(requestParameters['aryeoGroupId']);
            }
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("Token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/discounts/{discount_id}`.replace(`{${"discount_id"}}`, encodeURIComponent(String(requestParameters['discountId']))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Delete a discount.
     */
    deleteDiscountsDiscountId(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.deleteDiscountsDiscountIdRaw(requestParameters, initOverrides);
        });
    }
    /**
     * Delete a tax.
     */
    deleteTaxesTaxIdRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['taxId'] == null) {
                throw new runtime.RequiredError('taxId', 'Required parameter "taxId" was null or undefined when calling deleteTaxesTaxId().');
            }
            if (requestParameters['aryeoGroupId'] == null) {
                throw new runtime.RequiredError('aryeoGroupId', 'Required parameter "aryeoGroupId" was null or undefined when calling deleteTaxesTaxId().');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters['aryeoGroupId'] != null) {
                headerParameters['Aryeo-Group-Id'] = String(requestParameters['aryeoGroupId']);
            }
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("Token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/taxes/{tax_id}`.replace(`{${"tax_id"}}`, encodeURIComponent(String(requestParameters['taxId']))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Delete a tax.
     */
    deleteTaxesTaxId(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.deleteTaxesTaxIdRaw(requestParameters, initOverrides);
        });
    }
    /**
     * List all coupons.
     */
    getCouponsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['aryeoGroupId'] == null) {
                throw new runtime.RequiredError('aryeoGroupId', 'Required parameter "aryeoGroupId" was null or undefined when calling getCoupons().');
            }
            const queryParameters = {};
            if (requestParameters['filterSearch'] != null) {
                queryParameters['filter[search]'] = requestParameters['filterSearch'];
            }
            if (requestParameters['include'] != null) {
                queryParameters['include'] = requestParameters['include'];
            }
            if (requestParameters['sort'] != null) {
                queryParameters['sort'] = requestParameters['sort'];
            }
            if (requestParameters['perPage'] != null) {
                queryParameters['per_page'] = requestParameters['perPage'];
            }
            if (requestParameters['page'] != null) {
                queryParameters['page'] = requestParameters['page'];
            }
            const headerParameters = {};
            if (requestParameters['aryeoGroupId'] != null) {
                headerParameters['Aryeo-Group-Id'] = String(requestParameters['aryeoGroupId']);
            }
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("Token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/coupons`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.CouponCollectionFromJSON)(jsonValue));
        });
    }
    /**
     * List all coupons.
     */
    getCoupons(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getCouponsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * List all product categories of a company.
     */
    getProductCategoriesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['aryeoGroupId'] == null) {
                throw new runtime.RequiredError('aryeoGroupId', 'Required parameter "aryeoGroupId" was null or undefined when calling getProductCategories().');
            }
            const queryParameters = {};
            if (requestParameters['sort'] != null) {
                queryParameters['sort'] = requestParameters['sort'];
            }
            if (requestParameters['perPage'] != null) {
                queryParameters['per_page'] = requestParameters['perPage'];
            }
            if (requestParameters['page'] != null) {
                queryParameters['page'] = requestParameters['page'];
            }
            if (requestParameters['filterSearch'] != null) {
                queryParameters['filter[search]'] = requestParameters['filterSearch'];
            }
            const headerParameters = {};
            if (requestParameters['aryeoGroupId'] != null) {
                headerParameters['Aryeo-Group-Id'] = String(requestParameters['aryeoGroupId']);
            }
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("Token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/product-categories`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ProductCategoryCollectionFromJSON)(jsonValue));
        });
    }
    /**
     * List all product categories of a company.
     */
    getProductCategories(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getProductCategoriesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * List all products of a group.
     */
    getProductsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['aryeoGroupId'] == null) {
                throw new runtime.RequiredError('aryeoGroupId', 'Required parameter "aryeoGroupId" was null or undefined when calling getProducts().');
            }
            const queryParameters = {};
            if (requestParameters['sort'] != null) {
                queryParameters['sort'] = requestParameters['sort'];
            }
            if (requestParameters['perPage'] != null) {
                queryParameters['per_page'] = requestParameters['perPage'];
            }
            if (requestParameters['page'] != null) {
                queryParameters['page'] = requestParameters['page'];
            }
            if (requestParameters['filterSearch'] != null) {
                queryParameters['filter[search]'] = requestParameters['filterSearch'];
            }
            if (requestParameters['filterIncludeInactive'] != null) {
                queryParameters['filter[include_inactive]'] = requestParameters['filterIncludeInactive'];
            }
            if (requestParameters['filterCategoryIds'] != null) {
                queryParameters['filter[category_ids][]'] = requestParameters['filterCategoryIds'].join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters['filterType'] != null) {
                queryParameters['filter[type]'] = requestParameters['filterType'];
            }
            const headerParameters = {};
            if (requestParameters['aryeoGroupId'] != null) {
                headerParameters['Aryeo-Group-Id'] = String(requestParameters['aryeoGroupId']);
            }
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("Token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/products`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ProductCollectionFromJSON)(jsonValue));
        });
    }
    /**
     * List all products of a group.
     */
    getProducts(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getProductsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * List all territories.
     */
    getTerritoriesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['aryeoGroupId'] == null) {
                throw new runtime.RequiredError('aryeoGroupId', 'Required parameter "aryeoGroupId" was null or undefined when calling getTerritories().');
            }
            const queryParameters = {};
            if (requestParameters['filterAddressId'] != null) {
                queryParameters['filter[address_id]'] = requestParameters['filterAddressId'];
            }
            const headerParameters = {};
            if (requestParameters['aryeoGroupId'] != null) {
                headerParameters['Aryeo-Group-Id'] = String(requestParameters['aryeoGroupId']);
            }
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("Token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/territories`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.TerritoryCollectionFromJSON)(jsonValue));
        });
    }
    /**
     * List all territories.
     */
    getTerritories(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getTerritoriesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Create a discount.
     */
    postDiscountsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (requestParameters['aryeoGroupId'] != null) {
                headerParameters['Aryeo-Group-Id'] = String(requestParameters['aryeoGroupId']);
            }
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("Token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/discounts`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.DiscountPostPayloadToJSON)(requestParameters['discountPostPayload']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.DiscountResourceFromJSON)(jsonValue));
        });
    }
    /**
     * Create a discount.
     */
    postDiscounts() {
        return __awaiter(this, arguments, void 0, function* (requestParameters = {}, initOverrides) {
            const response = yield this.postDiscountsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Create a tax.
     */
    postTaxesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (requestParameters['aryeoGroupId'] != null) {
                headerParameters['Aryeo-Group-Id'] = String(requestParameters['aryeoGroupId']);
            }
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("Token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/taxes`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.TaxPostPayloadToJSON)(requestParameters['taxPostPayload']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.TaxResourceFromJSON)(jsonValue));
        });
    }
    /**
     * Create a tax.
     */
    postTaxes() {
        return __awaiter(this, arguments, void 0, function* (requestParameters = {}, initOverrides) {
            const response = yield this.postTaxesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
}
exports.ProductsApi = ProductsApi;
