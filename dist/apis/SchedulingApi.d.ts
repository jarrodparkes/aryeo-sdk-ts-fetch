/**
 * Aryeo
 * # Introduction The Aryeo API provides access to the Aryeo platform.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: jarrodp@zillowgroup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { CalendarDayCollection, TimeslotCollection } from '../models/index';
import * as runtime from '../runtime';
export interface BlocksBlockIdDeleteRequest {
    blockId: string;
}
export interface BlocksBlockIdGetRequest {
    blockId: string;
}
export interface BlocksBlockIdPutRequest {
    blockId: string;
}
export interface GetAvailableDatesRequest {
    aryeoGroupId: string;
    timezone: string;
    filterUserIds?: Array<string>;
    filterAppointmentId?: string;
    filterStartAt?: Date;
    filterEndAt?: Date;
    filterTimeframe?: GetAvailableDatesFilterTimeframeEnum;
    duration?: number;
    interval?: number;
    page?: number;
    perPage?: number;
}
export interface GetAvailableTimeslotsRequest {
    aryeoGroupId: string;
    date: Date;
    timezone: string;
    filterUserIds?: Array<string>;
    filterAppointmentId?: string;
    duration?: number;
    interval?: number;
    page?: number;
    perPage?: number;
}
/**
 *
 */
export declare class SchedulingApi extends runtime.BaseAPI {
    /**
     * blocks-block-id-delete
     */
    blocksBlockIdDeleteRaw(requestParameters: BlocksBlockIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>>;
    /**
     * blocks-block-id-delete
     */
    blocksBlockIdDelete(requestParameters: BlocksBlockIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object>;
    /**
     * blocks-block-id-get
     */
    blocksBlockIdGetRaw(requestParameters: BlocksBlockIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>>;
    /**
     * blocks-block-id-get
     */
    blocksBlockIdGet(requestParameters: BlocksBlockIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object>;
    /**
     * blocks-block-id-put
     */
    blocksBlockIdPutRaw(requestParameters: BlocksBlockIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>>;
    /**
     * blocks-block-id-put
     */
    blocksBlockIdPut(requestParameters: BlocksBlockIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object>;
    /**
     * blocks-post
     */
    blocksPostRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>>;
    /**
     * blocks-post
     */
    blocksPost(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object>;
    /**
     * Fetch available calendar days for scheduling or rescheduling an appointment. Availability can be retrieved using a specific start & end date range, or using a timeframe. When using a timeframe, the page parameter can be used to flip through weeks, months, etc.
     */
    getAvailableDatesRaw(requestParameters: GetAvailableDatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CalendarDayCollection>>;
    /**
     * Fetch available calendar days for scheduling or rescheduling an appointment. Availability can be retrieved using a specific start & end date range, or using a timeframe. When using a timeframe, the page parameter can be used to flip through weeks, months, etc.
     */
    getAvailableDates(requestParameters: GetAvailableDatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CalendarDayCollection>;
    /**
     * Fetch available timeslots for scheduling or rescheduling an appointment. Timeslots are returned for the entire day in the local timezone.   Results are returned in UTC!
     */
    getAvailableTimeslotsRaw(requestParameters: GetAvailableTimeslotsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TimeslotCollection>>;
    /**
     * Fetch available timeslots for scheduling or rescheduling an appointment. Timeslots are returned for the entire day in the local timezone.   Results are returned in UTC!
     */
    getAvailableTimeslots(requestParameters: GetAvailableTimeslotsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TimeslotCollection>;
    /**
     * regions-get
     */
    regionsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>>;
    /**
     * regions-get
     */
    regionsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object>;
    /**
     * scheduling-assignment-get
     */
    schedulingAssignmentGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>>;
    /**
     * scheduling-assignment-get
     */
    schedulingAssignmentGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object>;
    /**
     * scheduling-item-groupings-get
     */
    schedulingItemGroupingsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>>;
    /**
     * scheduling-item-groupings-get
     */
    schedulingItemGroupingsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object>;
}
/**
 * @export
 */
export declare const GetAvailableDatesFilterTimeframeEnum: {
    readonly Day: "DAY";
    readonly Week: "WEEK";
    readonly Month: "MONTH";
    readonly Year: "YEAR";
};
export type GetAvailableDatesFilterTimeframeEnum = typeof GetAvailableDatesFilterTimeframeEnum[keyof typeof GetAvailableDatesFilterTimeframeEnum];
