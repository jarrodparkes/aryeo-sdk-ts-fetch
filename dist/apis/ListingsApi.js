"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Aryeo
 * # Introduction The Aryeo API provides access to the Aryeo platform.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: jarrodp@zillowgroup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetListingsFilterStatusEnum = exports.ListingsApi = void 0;
const index_1 = require("../models/index");
const runtime = require("../runtime");
/**
 *
 */
class ListingsApi extends runtime.BaseAPI {
    /**
     * Delete a video.
     */
    deleteVideosVideoIdRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['videoId'] == null) {
                throw new runtime.RequiredError('videoId', 'Required parameter "videoId" was null or undefined when calling deleteVideosVideoId().');
            }
            if (requestParameters['aryeoGroupId'] == null) {
                throw new runtime.RequiredError('aryeoGroupId', 'Required parameter "aryeoGroupId" was null or undefined when calling deleteVideosVideoId().');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters['aryeoGroupId'] != null) {
                headerParameters['Aryeo-Group-Id'] = String(requestParameters['aryeoGroupId']);
            }
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("Token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/videos/{video_id}`.replace(`{${"video_id"}}`, encodeURIComponent(String(requestParameters['videoId']))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Delete a video.
     */
    deleteVideosVideoId(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.deleteVideosVideoIdRaw(requestParameters, initOverrides);
        });
    }
    /**
     * Lists all listings available to a group.
     */
    getListingsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters['include'] != null) {
                queryParameters['include'] = requestParameters['include'];
            }
            if (requestParameters['filterSearch'] != null) {
                queryParameters['filter[search]'] = requestParameters['filterSearch'];
            }
            if (requestParameters['filterAddress'] != null) {
                queryParameters['filter[address]'] = requestParameters['filterAddress'];
            }
            if (requestParameters['filterListAgent'] != null) {
                queryParameters['filter[list_agent]'] = requestParameters['filterListAgent'];
            }
            if (requestParameters['filterStatus'] != null) {
                queryParameters['filter[status]'] = requestParameters['filterStatus'];
            }
            if (requestParameters['filterActive'] != null) {
                queryParameters['filter[active]'] = requestParameters['filterActive'];
            }
            if (requestParameters['filterPriceGte'] != null) {
                queryParameters['filter[price_gte]'] = requestParameters['filterPriceGte'];
            }
            if (requestParameters['filterPriceLte'] != null) {
                queryParameters['filter[price_lte]'] = requestParameters['filterPriceLte'];
            }
            if (requestParameters['filterSquareFeetGte'] != null) {
                queryParameters['filter[square_feet_gte]'] = requestParameters['filterSquareFeetGte'];
            }
            if (requestParameters['filterSquareFeetLte'] != null) {
                queryParameters['filter[square_feet_lte]'] = requestParameters['filterSquareFeetLte'];
            }
            if (requestParameters['filterBedroomsGte'] != null) {
                queryParameters['filter[bedrooms_gte]'] = requestParameters['filterBedroomsGte'];
            }
            if (requestParameters['filterBedroomsLte'] != null) {
                queryParameters['filter[bedrooms_lte]'] = requestParameters['filterBedroomsLte'];
            }
            if (requestParameters['filterBathroomsGte'] != null) {
                queryParameters['filter[bathrooms_gte]'] = requestParameters['filterBathroomsGte'];
            }
            if (requestParameters['filterBathroomsLte'] != null) {
                queryParameters['filter[bathrooms_lte]'] = requestParameters['filterBathroomsLte'];
            }
            if (requestParameters['sort'] != null) {
                queryParameters['sort'] = requestParameters['sort'];
            }
            if (requestParameters['perPage'] != null) {
                queryParameters['per_page'] = requestParameters['perPage'];
            }
            if (requestParameters['page'] != null) {
                queryParameters['page'] = requestParameters['page'];
            }
            const headerParameters = {};
            if (requestParameters['aryeoGroupId'] != null) {
                headerParameters['Aryeo-Group-Id'] = String(requestParameters['aryeoGroupId']);
            }
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("Token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/listings`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ListingCollectionFromJSON)(jsonValue));
        });
    }
    /**
     * Lists all listings available to a group.
     */
    getListings() {
        return __awaiter(this, arguments, void 0, function* (requestParameters = {}, initOverrides) {
            const response = yield this.getListingsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Retrieves the details of a listing with the given ID.
     */
    getListingsIdRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['listingId'] == null) {
                throw new runtime.RequiredError('listingId', 'Required parameter "listingId" was null or undefined when calling getListingsId().');
            }
            if (requestParameters['aryeoGroupId'] == null) {
                throw new runtime.RequiredError('aryeoGroupId', 'Required parameter "aryeoGroupId" was null or undefined when calling getListingsId().');
            }
            const queryParameters = {};
            if (requestParameters['include'] != null) {
                queryParameters['include'] = requestParameters['include'];
            }
            const headerParameters = {};
            if (requestParameters['aryeoGroupId'] != null) {
                headerParameters['Aryeo-Group-Id'] = String(requestParameters['aryeoGroupId']);
            }
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("Token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/listings/{listing_id}`.replace(`{${"listing_id"}}`, encodeURIComponent(String(requestParameters['listingId']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ListingResourceFromJSON)(jsonValue));
        });
    }
    /**
     * Retrieves the details of a listing with the given ID.
     */
    getListingsId(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getListingsIdRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Retrieve a video.
     */
    getVideosVideoIdRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['videoId'] == null) {
                throw new runtime.RequiredError('videoId', 'Required parameter "videoId" was null or undefined when calling getVideosVideoId().');
            }
            if (requestParameters['aryeoGroupId'] == null) {
                throw new runtime.RequiredError('aryeoGroupId', 'Required parameter "aryeoGroupId" was null or undefined when calling getVideosVideoId().');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters['aryeoGroupId'] != null) {
                headerParameters['Aryeo-Group-Id'] = String(requestParameters['aryeoGroupId']);
            }
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("Token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/videos/{video_id}`.replace(`{${"video_id"}}`, encodeURIComponent(String(requestParameters['videoId']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.VideoResourceFromJSON)(jsonValue));
        });
    }
    /**
     * Retrieve a video.
     */
    getVideosVideoId(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getVideosVideoIdRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * listings-listing-id-cubi-casa-get
     */
    listingsListingIdCubiCasaGetRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['listingId'] == null) {
                throw new runtime.RequiredError('listingId', 'Required parameter "listingId" was null or undefined when calling listingsListingIdCubiCasaGet().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/listings/{listing_id}/cubi-casa`.replace(`{${"listing_id"}}`, encodeURIComponent(String(requestParameters['listingId']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response);
        });
    }
    /**
     * listings-listing-id-cubi-casa-get
     */
    listingsListingIdCubiCasaGet(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.listingsListingIdCubiCasaGetRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * listings-listing-id-details-search-get
     */
    listingsListingIdDetailsSearchGetRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['listingId'] == null) {
                throw new runtime.RequiredError('listingId', 'Required parameter "listingId" was null or undefined when calling listingsListingIdDetailsSearchGet().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/listings/{listing_id}/details/search`.replace(`{${"listing_id"}}`, encodeURIComponent(String(requestParameters['listingId']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response);
        });
    }
    /**
     * listings-listing-id-details-search-get
     */
    listingsListingIdDetailsSearchGet(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.listingsListingIdDetailsSearchGetRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * listings-listing-id-stats-get
     */
    listingsListingIdStatsGetRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['listingId'] == null) {
                throw new runtime.RequiredError('listingId', 'Required parameter "listingId" was null or undefined when calling listingsListingIdStatsGet().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/listings/{listing_id}/stats`.replace(`{${"listing_id"}}`, encodeURIComponent(String(requestParameters['listingId']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response);
        });
    }
    /**
     * listings-listing-id-stats-get
     */
    listingsListingIdStatsGet(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.listingsListingIdStatsGetRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Create a listing.
     */
    postListingsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['aryeoGroupId'] == null) {
                throw new runtime.RequiredError('aryeoGroupId', 'Required parameter "aryeoGroupId" was null or undefined when calling postListings().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (requestParameters['aryeoGroupId'] != null) {
                headerParameters['Aryeo-Group-Id'] = String(requestParameters['aryeoGroupId']);
            }
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("Token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/listings`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ListingPostPayloadToJSON)(requestParameters['listingPostPayload']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ListingResourceFromJSON)(jsonValue));
        });
    }
    /**
     * Create a listing.
     */
    postListings(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postListingsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Update a video.
     */
    putVideosVideoIdRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['videoId'] == null) {
                throw new runtime.RequiredError('videoId', 'Required parameter "videoId" was null or undefined when calling putVideosVideoId().');
            }
            if (requestParameters['aryeoGroupId'] == null) {
                throw new runtime.RequiredError('aryeoGroupId', 'Required parameter "aryeoGroupId" was null or undefined when calling putVideosVideoId().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (requestParameters['aryeoGroupId'] != null) {
                headerParameters['Aryeo-Group-Id'] = String(requestParameters['aryeoGroupId']);
            }
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("Token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/videos/{video_id}`.replace(`{${"video_id"}}`, encodeURIComponent(String(requestParameters['videoId']))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.VideoPutPayloadToJSON)(requestParameters['videoPutPayload']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.VideoResourceFromJSON)(jsonValue));
        });
    }
    /**
     * Update a video.
     */
    putVideosVideoId(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putVideosVideoIdRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Update a listing.
     */
    updateListingsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['listingId'] == null) {
                throw new runtime.RequiredError('listingId', 'Required parameter "listingId" was null or undefined when calling updateListings().');
            }
            if (requestParameters['aryeoGroupId'] == null) {
                throw new runtime.RequiredError('aryeoGroupId', 'Required parameter "aryeoGroupId" was null or undefined when calling updateListings().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (requestParameters['aryeoGroupId'] != null) {
                headerParameters['Aryeo-Group-Id'] = String(requestParameters['aryeoGroupId']);
            }
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("Token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/listings/{listing_id}`.replace(`{${"listing_id"}}`, encodeURIComponent(String(requestParameters['listingId']))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ListingPutPayloadToJSON)(requestParameters['listingPutPayload']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ListingResourceFromJSON)(jsonValue));
        });
    }
    /**
     * Update a listing.
     */
    updateListings(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.updateListingsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
}
exports.ListingsApi = ListingsApi;
/**
 * @export
 */
exports.GetListingsFilterStatusEnum = {
    Draft: 'DRAFT',
    ComingSoon: 'COMING_SOON',
    ForLease: 'FOR_LEASE',
    ForSale: 'FOR_SALE',
    PendingSale: 'PENDING_SALE',
    PendingLease: 'PENDING_LEASE',
    Sold: 'SOLD',
    Leased: 'LEASED',
    OffMarket: 'OFF_MARKET',
    Null: 'null'
};
