"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Aryeo
 * # Introduction The Aryeo API provides access to the Aryeo platform.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: jarrodp@zillowgroup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetAppointmentsFilterStatusesEnum = exports.GetAppointmentsFilterTenseEnum = exports.AppointmentsApi = void 0;
const index_1 = require("../models/index");
const runtime = require("../runtime");
/**
 *
 */
class AppointmentsApi extends runtime.BaseAPI {
    /**
     * appointments-appointment-id-3dh-tour-link-get
     */
    appointmentsAppointmentId3dhTourLinkGetRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['appointmentId'] == null) {
                throw new runtime.RequiredError('appointmentId', 'Required parameter "appointmentId" was null or undefined when calling appointmentsAppointmentId3dhTourLinkGet().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/appointments/{appointment_id}/3dh-tour-link`.replace(`{${"appointment_id"}}`, encodeURIComponent(String(requestParameters['appointmentId']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * appointments-appointment-id-3dh-tour-link-get
     */
    appointmentsAppointmentId3dhTourLinkGet(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.appointmentsAppointmentId3dhTourLinkGetRaw(requestParameters, initOverrides);
        });
    }
    /**
     * appointments-appointment-id-accept-put
     */
    appointmentsAppointmentIdAcceptPutRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['appointmentId'] == null) {
                throw new runtime.RequiredError('appointmentId', 'Required parameter "appointmentId" was null or undefined when calling appointmentsAppointmentIdAcceptPut().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/appointments/{appointment_id}/accept`.replace(`{${"appointment_id"}}`, encodeURIComponent(String(requestParameters['appointmentId']))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response);
        });
    }
    /**
     * appointments-appointment-id-accept-put
     */
    appointmentsAppointmentIdAcceptPut(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.appointmentsAppointmentIdAcceptPutRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * appointments-appointment-id-decline-put
     */
    appointmentsAppointmentIdDeclinePutRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['appointmentId'] == null) {
                throw new runtime.RequiredError('appointmentId', 'Required parameter "appointmentId" was null or undefined when calling appointmentsAppointmentIdDeclinePut().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/appointments/{appointment_id}/decline`.replace(`{${"appointment_id"}}`, encodeURIComponent(String(requestParameters['appointmentId']))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response);
        });
    }
    /**
     * appointments-appointment-id-decline-put
     */
    appointmentsAppointmentIdDeclinePut(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.appointmentsAppointmentIdDeclinePutRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * appointments-appointment-id-postpone-put
     */
    appointmentsAppointmentIdPostponePutRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['appointmentId'] == null) {
                throw new runtime.RequiredError('appointmentId', 'Required parameter "appointmentId" was null or undefined when calling appointmentsAppointmentIdPostponePut().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/appointments/{appointment_id}/postpone`.replace(`{${"appointment_id"}}`, encodeURIComponent(String(requestParameters['appointmentId']))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response);
        });
    }
    /**
     * appointments-appointment-id-postpone-put
     */
    appointmentsAppointmentIdPostponePut(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.appointmentsAppointmentIdPostponePutRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * appointments-appointment-id-schedule-put
     */
    appointmentsAppointmentIdSchedulePutRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['appointmentId'] == null) {
                throw new runtime.RequiredError('appointmentId', 'Required parameter "appointmentId" was null or undefined when calling appointmentsAppointmentIdSchedulePut().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/appointments/{appointment_id}/schedule`.replace(`{${"appointment_id"}}`, encodeURIComponent(String(requestParameters['appointmentId']))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response);
        });
    }
    /**
     * appointments-appointment-id-schedule-put
     */
    appointmentsAppointmentIdSchedulePut(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.appointmentsAppointmentIdSchedulePutRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * appointments-store-post
     */
    appointmentsStorePostRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/appointments/store`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response);
        });
    }
    /**
     * appointments-store-post
     */
    appointmentsStorePost(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.appointmentsStorePostRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * List all appointments. By default, returns a list of appointments that have been scheduled and have not been canceled
     */
    getAppointmentsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['aryeoGroupId'] == null) {
                throw new runtime.RequiredError('aryeoGroupId', 'Required parameter "aryeoGroupId" was null or undefined when calling getAppointments().');
            }
            const queryParameters = {};
            if (requestParameters['include'] != null) {
                queryParameters['include'] = requestParameters['include'];
            }
            if (requestParameters['filterTense'] != null) {
                queryParameters['filter[tense]'] = requestParameters['filterTense'];
            }
            if (requestParameters['filterStatuses'] != null) {
                queryParameters['filter[statuses][]'] = requestParameters['filterStatuses'].join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters['filterStartAtGte'] != null) {
                queryParameters['filter[start_at_gte]'] = requestParameters['filterStartAtGte'].toISOString();
            }
            if (requestParameters['filterStartAtLte'] != null) {
                queryParameters['filter[start_at_lte]'] = requestParameters['filterStartAtLte'].toISOString();
            }
            if (requestParameters['filterUserIds'] != null) {
                queryParameters['filter[user_ids][]'] = requestParameters['filterUserIds'].join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters['sort'] != null) {
                queryParameters['sort'] = requestParameters['sort'];
            }
            if (requestParameters['perPage'] != null) {
                queryParameters['per_page'] = requestParameters['perPage'];
            }
            if (requestParameters['page'] != null) {
                queryParameters['page'] = requestParameters['page'];
            }
            const headerParameters = {};
            if (requestParameters['aryeoGroupId'] != null) {
                headerParameters['Aryeo-Group-Id'] = String(requestParameters['aryeoGroupId']);
            }
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("Token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/appointments`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.AppointmentCollectionFromJSON)(jsonValue));
        });
    }
    /**
     * List all appointments. By default, returns a list of appointments that have been scheduled and have not been canceled
     */
    getAppointments(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getAppointmentsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Retrieves the details of an appointment with the given ID.
     */
    getAppointmentsIdRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['appointmentId'] == null) {
                throw new runtime.RequiredError('appointmentId', 'Required parameter "appointmentId" was null or undefined when calling getAppointmentsId().');
            }
            if (requestParameters['aryeoGroupId'] == null) {
                throw new runtime.RequiredError('aryeoGroupId', 'Required parameter "aryeoGroupId" was null or undefined when calling getAppointmentsId().');
            }
            const queryParameters = {};
            if (requestParameters['include'] != null) {
                queryParameters['include'] = requestParameters['include'];
            }
            const headerParameters = {};
            if (requestParameters['aryeoGroupId'] != null) {
                headerParameters['Aryeo-Group-Id'] = String(requestParameters['aryeoGroupId']);
            }
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("Token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/appointments/{appointment_id}`.replace(`{${"appointment_id"}}`, encodeURIComponent(String(requestParameters['appointmentId']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.AppointmentResourceFromJSON)(jsonValue));
        });
    }
    /**
     * Retrieves the details of an appointment with the given ID.
     */
    getAppointmentsId(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getAppointmentsIdRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Updates the details of an appointment with the given ID.
     */
    putAppointmentsAppointmentIdRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['appointmentId'] == null) {
                throw new runtime.RequiredError('appointmentId', 'Required parameter "appointmentId" was null or undefined when calling putAppointmentsAppointmentId().');
            }
            if (requestParameters['aryeoGroupId'] == null) {
                throw new runtime.RequiredError('aryeoGroupId', 'Required parameter "aryeoGroupId" was null or undefined when calling putAppointmentsAppointmentId().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (requestParameters['aryeoGroupId'] != null) {
                headerParameters['Aryeo-Group-Id'] = String(requestParameters['aryeoGroupId']);
            }
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("Token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/appointments/{appointment_id}`.replace(`{${"appointment_id"}}`, encodeURIComponent(String(requestParameters['appointmentId']))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.AppointmentUpdatePutPayloadToJSON)(requestParameters['appointmentUpdatePutPayload']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.AppointmentResourceFromJSON)(jsonValue));
        });
    }
    /**
     * Updates the details of an appointment with the given ID.
     */
    putAppointmentsAppointmentId(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putAppointmentsAppointmentIdRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Cancel an appointment. The appointments order\'s customer can be optionally notified of this change.
     */
    putAppointmentsAppointmentIdCancelRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['appointmentId'] == null) {
                throw new runtime.RequiredError('appointmentId', 'Required parameter "appointmentId" was null or undefined when calling putAppointmentsAppointmentIdCancel().');
            }
            if (requestParameters['aryeoGroupId'] == null) {
                throw new runtime.RequiredError('aryeoGroupId', 'Required parameter "aryeoGroupId" was null or undefined when calling putAppointmentsAppointmentIdCancel().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (requestParameters['aryeoGroupId'] != null) {
                headerParameters['Aryeo-Group-Id'] = String(requestParameters['aryeoGroupId']);
            }
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("Token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/appointments/{appointment_id}/cancel`.replace(`{${"appointment_id"}}`, encodeURIComponent(String(requestParameters['appointmentId']))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.AppointmentCancelPutPayloadToJSON)(requestParameters['appointmentCancelPutPayload']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.AppointmentResourceFromJSON)(jsonValue));
        });
    }
    /**
     * Cancel an appointment. The appointments order\'s customer can be optionally notified of this change.
     */
    putAppointmentsAppointmentIdCancel(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putAppointmentsAppointmentIdCancelRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Reschedule an appointment. The appointments order\'s customer can be optionally notified of this change.
     */
    putAppointmentsAppointmentIdRescheduleRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['appointmentId'] == null) {
                throw new runtime.RequiredError('appointmentId', 'Required parameter "appointmentId" was null or undefined when calling putAppointmentsAppointmentIdReschedule().');
            }
            if (requestParameters['aryeoGroupId'] == null) {
                throw new runtime.RequiredError('aryeoGroupId', 'Required parameter "aryeoGroupId" was null or undefined when calling putAppointmentsAppointmentIdReschedule().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (requestParameters['aryeoGroupId'] != null) {
                headerParameters['Aryeo-Group-Id'] = String(requestParameters['aryeoGroupId']);
            }
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("Token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/appointments/{appointment_id}/reschedule`.replace(`{${"appointment_id"}}`, encodeURIComponent(String(requestParameters['appointmentId']))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.AppointmentReschedulePutPayloadToJSON)(requestParameters['appointmentReschedulePutPayload']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.AppointmentResourceFromJSON)(jsonValue));
        });
    }
    /**
     * Reschedule an appointment. The appointments order\'s customer can be optionally notified of this change.
     */
    putAppointmentsAppointmentIdReschedule(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.putAppointmentsAppointmentIdRescheduleRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
}
exports.AppointmentsApi = AppointmentsApi;
/**
 * @export
 */
exports.GetAppointmentsFilterTenseEnum = {
    Past: 'PAST',
    Upcoming: 'UPCOMING'
};
/**
 * @export
 */
exports.GetAppointmentsFilterStatusesEnum = {
    Scheduled: 'SCHEDULED',
    Unscheduled: 'UNSCHEDULED',
    Canceled: 'CANCELED'
};
