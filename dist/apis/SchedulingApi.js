"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Aryeo
 * # Introduction The Aryeo API provides access to the Aryeo platform.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: jarrodp@zillowgroup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetAvailableDatesFilterTimeframeEnum = exports.SchedulingApi = void 0;
const index_1 = require("../models/index");
const runtime = require("../runtime");
/**
 *
 */
class SchedulingApi extends runtime.BaseAPI {
    /**
     * blocks-block-id-delete
     */
    blocksBlockIdDeleteRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['blockId'] == null) {
                throw new runtime.RequiredError('blockId', 'Required parameter "blockId" was null or undefined when calling blocksBlockIdDelete().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/blocks/{block_id}`.replace(`{${"block_id"}}`, encodeURIComponent(String(requestParameters['blockId']))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response);
        });
    }
    /**
     * blocks-block-id-delete
     */
    blocksBlockIdDelete(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.blocksBlockIdDeleteRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * blocks-block-id-get
     */
    blocksBlockIdGetRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['blockId'] == null) {
                throw new runtime.RequiredError('blockId', 'Required parameter "blockId" was null or undefined when calling blocksBlockIdGet().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/blocks/{block_id}`.replace(`{${"block_id"}}`, encodeURIComponent(String(requestParameters['blockId']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response);
        });
    }
    /**
     * blocks-block-id-get
     */
    blocksBlockIdGet(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.blocksBlockIdGetRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * blocks-block-id-put
     */
    blocksBlockIdPutRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['blockId'] == null) {
                throw new runtime.RequiredError('blockId', 'Required parameter "blockId" was null or undefined when calling blocksBlockIdPut().');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/blocks/{block_id}`.replace(`{${"block_id"}}`, encodeURIComponent(String(requestParameters['blockId']))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response);
        });
    }
    /**
     * blocks-block-id-put
     */
    blocksBlockIdPut(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.blocksBlockIdPutRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * blocks-post
     */
    blocksPostRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/blocks`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response);
        });
    }
    /**
     * blocks-post
     */
    blocksPost(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.blocksPostRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * Fetch available calendar days for scheduling or rescheduling an appointment. Availability can be retrieved using a specific start & end date range, or using a timeframe. When using a timeframe, the page parameter can be used to flip through weeks, months, etc.
     */
    getAvailableDatesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['aryeoGroupId'] == null) {
                throw new runtime.RequiredError('aryeoGroupId', 'Required parameter "aryeoGroupId" was null or undefined when calling getAvailableDates().');
            }
            if (requestParameters['timezone'] == null) {
                throw new runtime.RequiredError('timezone', 'Required parameter "timezone" was null or undefined when calling getAvailableDates().');
            }
            const queryParameters = {};
            if (requestParameters['filterUserIds'] != null) {
                queryParameters['filter[user_ids][]'] = requestParameters['filterUserIds'].join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters['filterAppointmentId'] != null) {
                queryParameters['filter[appointment_id]'] = requestParameters['filterAppointmentId'];
            }
            if (requestParameters['filterStartAt'] != null) {
                queryParameters['filter[start_at]'] = requestParameters['filterStartAt'].toISOString();
            }
            if (requestParameters['filterEndAt'] != null) {
                queryParameters['filter[end_at]'] = requestParameters['filterEndAt'].toISOString();
            }
            if (requestParameters['filterTimeframe'] != null) {
                queryParameters['filter[timeframe]'] = requestParameters['filterTimeframe'];
            }
            if (requestParameters['duration'] != null) {
                queryParameters['duration'] = requestParameters['duration'];
            }
            if (requestParameters['interval'] != null) {
                queryParameters['interval'] = requestParameters['interval'];
            }
            if (requestParameters['timezone'] != null) {
                queryParameters['timezone'] = requestParameters['timezone'];
            }
            if (requestParameters['page'] != null) {
                queryParameters['page'] = requestParameters['page'];
            }
            if (requestParameters['perPage'] != null) {
                queryParameters['per_page'] = requestParameters['perPage'];
            }
            const headerParameters = {};
            if (requestParameters['aryeoGroupId'] != null) {
                headerParameters['Aryeo-Group-Id'] = String(requestParameters['aryeoGroupId']);
            }
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("Token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/scheduling/available-dates`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.CalendarDayCollectionFromJSON)(jsonValue));
        });
    }
    /**
     * Fetch available calendar days for scheduling or rescheduling an appointment. Availability can be retrieved using a specific start & end date range, or using a timeframe. When using a timeframe, the page parameter can be used to flip through weeks, months, etc.
     */
    getAvailableDates(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getAvailableDatesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Fetch available timeslots for scheduling or rescheduling an appointment. Timeslots are returned for the entire day in the local timezone.   Results are returned in UTC!
     */
    getAvailableTimeslotsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['aryeoGroupId'] == null) {
                throw new runtime.RequiredError('aryeoGroupId', 'Required parameter "aryeoGroupId" was null or undefined when calling getAvailableTimeslots().');
            }
            if (requestParameters['date'] == null) {
                throw new runtime.RequiredError('date', 'Required parameter "date" was null or undefined when calling getAvailableTimeslots().');
            }
            if (requestParameters['timezone'] == null) {
                throw new runtime.RequiredError('timezone', 'Required parameter "timezone" was null or undefined when calling getAvailableTimeslots().');
            }
            const queryParameters = {};
            if (requestParameters['filterUserIds'] != null) {
                queryParameters['filter[user_ids][]'] = requestParameters['filterUserIds'].join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters['filterAppointmentId'] != null) {
                queryParameters['filter[appointment_id]'] = requestParameters['filterAppointmentId'];
            }
            if (requestParameters['duration'] != null) {
                queryParameters['duration'] = requestParameters['duration'];
            }
            if (requestParameters['interval'] != null) {
                queryParameters['interval'] = requestParameters['interval'];
            }
            if (requestParameters['page'] != null) {
                queryParameters['page'] = requestParameters['page'];
            }
            if (requestParameters['perPage'] != null) {
                queryParameters['per_page'] = requestParameters['perPage'];
            }
            if (requestParameters['date'] != null) {
                queryParameters['date'] = requestParameters['date'].toISOString().substring(0, 10);
            }
            if (requestParameters['timezone'] != null) {
                queryParameters['timezone'] = requestParameters['timezone'];
            }
            const headerParameters = {};
            if (requestParameters['aryeoGroupId'] != null) {
                headerParameters['Aryeo-Group-Id'] = String(requestParameters['aryeoGroupId']);
            }
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("Token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/scheduling/available-timeslots`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.TimeslotCollectionFromJSON)(jsonValue));
        });
    }
    /**
     * Fetch available timeslots for scheduling or rescheduling an appointment. Timeslots are returned for the entire day in the local timezone.   Results are returned in UTC!
     */
    getAvailableTimeslots(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getAvailableTimeslotsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * regions-get
     */
    regionsGetRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/regions`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response);
        });
    }
    /**
     * regions-get
     */
    regionsGet(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.regionsGetRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * scheduling-assignment-get
     */
    schedulingAssignmentGetRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/scheduling/assignment`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response);
        });
    }
    /**
     * scheduling-assignment-get
     */
    schedulingAssignmentGet(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.schedulingAssignmentGetRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * scheduling-item-groupings-get
     */
    schedulingItemGroupingsGetRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/scheduling/item-groupings`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response);
        });
    }
    /**
     * scheduling-item-groupings-get
     */
    schedulingItemGroupingsGet(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.schedulingItemGroupingsGetRaw(initOverrides);
            return yield response.value();
        });
    }
}
exports.SchedulingApi = SchedulingApi;
/**
 * @export
 */
exports.GetAvailableDatesFilterTimeframeEnum = {
    Day: 'DAY',
    Week: 'WEEK',
    Month: 'MONTH',
    Year: 'YEAR'
};
