/**
 * Aryeo
 * # Introduction The Aryeo API provides access to the Aryeo platform.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: jarrodp@zillowgroup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Appointment } from './Appointment';
import type { DiscountAmount } from './DiscountAmount';
import type { Order } from './Order';
import type { Product } from './Product';
import type { ProductVariant } from './ProductVariant';
import type { Tax } from './Tax';
/**
 * An individual service or charge of an order. Order items can capture products serviced by or fees applied to an order.
 * @export
 * @interface OrderItem
 */
export interface OrderItem {
    /**
     * ID of the item. UUID Version 4.
     * @type {string}
     * @memberof OrderItem
     */
    id: string;
    /**
     * The title of the item.
     * @type {string}
     * @memberof OrderItem
     */
    title?: string;
    /**
     * The sub title of the item.
     * @type {string}
     * @memberof OrderItem
     */
    subtitle?: string;
    /**
     * The description of the item.
     * @type {string}
     * @memberof OrderItem
     */
    description?: string;
    /**
     * The type of order item.
     * @type {string}
     * @memberof OrderItem
     */
    purchasableType?: OrderItemPurchasableTypeEnum;
    /**
     * A positive integer in the smallest currency unit (that is, 100 cents for $1.00) representing the cost of a single instance of this item. This is multiplied by the quantity to calculate what was or will be charged. Legacy version of unit_price_amount.
     * @type {number}
     * @memberof OrderItem
     */
    amount?: number;
    /**
     * A positive integer in the smallest currency unit (that is, 100 cents for $1.00) representing the cost of a single instance of this item. This is multiplied by the quantity to calculate what was or will be charged.
     * @type {number}
     * @memberof OrderItem
     */
    unitPriceAmount?: number;
    /**
     * A positive integer representing the number of instances of this item that was or will be serviced.
     * @type {number}
     * @memberof OrderItem
     */
    quantity?: number;
    /**
     * A positive integer in the smallest currency unit (that is, 100 cents for $1.00) representing the total cost of this item (before discounts and taxes have been applied) to be charge.
     * @type {number}
     * @memberof OrderItem
     */
    grossTotalAmount?: number;
    /**
     *
     * @type {Appointment}
     * @memberof OrderItem
     */
    appointment?: Appointment;
    /**
     *
     * @type {Array<DiscountAmount>}
     * @memberof OrderItem
     */
    discounts?: Array<DiscountAmount>;
    /**
     *
     * @type {Order}
     * @memberof OrderItem
     */
    order?: Order;
    /**
     *
     * @type {Product}
     * @memberof OrderItem
     */
    product?: Product;
    /**
     *
     * @type {ProductVariant}
     * @memberof OrderItem
     */
    productVariant?: ProductVariant;
    /**
     *
     * @type {Array<Tax>}
     * @memberof OrderItem
     */
    taxes?: Array<Tax>;
}
/**
 * @export
 */
export declare const OrderItemPurchasableTypeEnum: {
    readonly ProductVariant: "PRODUCT_VARIANT";
    readonly Fee: "FEE";
    readonly Custom: "CUSTOM";
};
export type OrderItemPurchasableTypeEnum = typeof OrderItemPurchasableTypeEnum[keyof typeof OrderItemPurchasableTypeEnum];
/**
 * Check if a given object implements the OrderItem interface.
 */
export declare function instanceOfOrderItem(value: object): value is OrderItem;
export declare function OrderItemFromJSON(json: any): OrderItem;
export declare function OrderItemFromJSONTyped(json: any, ignoreDiscriminator: boolean): OrderItem;
export declare function OrderItemToJSON(json: any): OrderItem;
export declare function OrderItemToJSONTyped(value?: OrderItem | null, ignoreDiscriminator?: boolean): any;
