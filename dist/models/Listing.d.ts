/**
 * Aryeo
 * # Introduction The Aryeo API provides access to the Aryeo platform.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: jarrodp@zillowgroup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Address } from './Address';
import type { Appointment } from './Appointment';
import type { FloorPlan } from './FloorPlan';
import type { Group } from './Group';
import type { Image } from './Image';
import type { InteractiveContent } from './InteractiveContent';
import type { ListingBuilding } from './ListingBuilding';
import type { ListingLot } from './ListingLot';
import type { ListingPrice } from './ListingPrice';
import type { MarketingMaterial } from './MarketingMaterial';
import type { Order } from './Order';
import type { PropertyWebsite } from './PropertyWebsite';
import type { Video } from './Video';
/**
 * A real estate listing.
 * @export
 * @interface Listing
 */
export interface Listing {
    /**
     * String representing the objectâ€™s type. Objects of the same type share the same schema.
     * @type {string}
     * @memberof Listing
     */
    object: string;
    /**
     * ID of the listing. UUID Version 4.
     * @type {string}
     * @memberof Listing
     */
    id: string;
    /**
     *
     * @type {Address}
     * @memberof Listing
     */
    address: Address;
    /**
     * The identifier for a listing on its local MLS.
     * @type {string}
     * @memberof Listing
     */
    mlsNumber?: string | null;
    /**
     * General type of the listing, primarily categorizing its use case. Examples include residential and commercial.
     * @type {string}
     * @memberof Listing
     */
    type?: ListingTypeEnum | null;
    /**
     * Further specifies the listing type. Examples include family residence and condominium.
     * @type {string}
     * @memberof Listing
     */
    subType?: ListingSubTypeEnum | null;
    /**
     * Local, regional, or otherwise custom status for the listing used by the parties involved in the listing transaction. While variable, these statuses are typically mapped to the listing's standard status.
     * @type {string}
     * @memberof Listing
     */
    status?: ListingStatusEnum | null;
    /**
     * The status of the listing as it reflects the state of the contract between the listing agent and seller or an agreement with a buyer, including Active, Active Under Contract, Canceled, Closed, Expired, Pending, and Withdrawn.
     * @type {string}
     * @memberof Listing
     */
    standardStatus?: ListingStandardStatusEnum | null;
    /**
     * A URL for a thumbnail representing the listing.
     * @type {string}
     * @memberof Listing
     */
    thumbnailUrl?: string | null;
    /**
     * A URL for a large thumbnail representing the listing.
     * @type {string}
     * @memberof Listing
     */
    largeThumbnailUrl?: string | null;
    /**
     * Description of the selling points of the building and/or land for sale.
     * @type {string}
     * @memberof Listing
     */
    description?: string | null;
    /**
     *
     * @type {ListingLot}
     * @memberof Listing
     */
    lot?: ListingLot;
    /**
     *
     * @type {ListingBuilding}
     * @memberof Listing
     */
    building?: ListingBuilding;
    /**
     *
     * @type {ListingPrice}
     * @memberof Listing
     */
    price?: ListingPrice;
    /**
     *
     * @type {Group}
     * @memberof Listing
     */
    listAgent?: Group;
    /**
     *
     * @type {Group}
     * @memberof Listing
     */
    coListAgent?: Group;
    /**
     * images
     * @type {Array<Image>}
     * @memberof Listing
     */
    images?: Array<Image>;
    /**
     * videos
     * @type {Array<Video>}
     * @memberof Listing
     */
    videos?: Array<Video>;
    /**
     * floor_plans
     * @type {Array<FloorPlan>}
     * @memberof Listing
     */
    floorPlans?: Array<FloorPlan>;
    /**
     * interactive_content
     * @type {Array<InteractiveContent>}
     * @memberof Listing
     */
    interactiveContent?: Array<InteractiveContent>;
    /**
     *
     * @type {PropertyWebsite}
     * @memberof Listing
     */
    propertyWebsite?: PropertyWebsite;
    /**
     * Marketing materials for this listing.
     * @type {Array<MarketingMaterial>}
     * @memberof Listing
     */
    marketingMaterials?: Array<MarketingMaterial>;
    /**
     * orders
     * @type {Array<Order>}
     * @memberof Listing
     */
    orders?: Array<Order>;
    /**
     *
     * @type {Array<Appointment>}
     * @memberof Listing
     */
    appointments?: Array<Appointment>;
    /**
     *
     * @type {Array<Appointment>}
     * @memberof Listing
     */
    unconfirmedAppointments?: Array<Appointment>;
    /**
     * Are downloads enabled for this listing?
     * @type {boolean}
     * @memberof Listing
     */
    downloadsEnabled: boolean;
    /**
     * Indicates if this is a Showcase listing
     * @type {boolean}
     * @memberof Listing
     */
    isShowcase?: boolean;
}
/**
 * @export
 */
export declare const ListingTypeEnum: {
    readonly BusinessOpportunity: "BUSINESS_OPPORTUNITY";
    readonly CommercialLease: "COMMERCIAL_LEASE";
    readonly CommercialSale: "COMMERCIAL_SALE";
    readonly Farm: "FARM";
    readonly Land: "LAND";
    readonly ManufacturedInPark: "MANUFACTURED_IN_PARK";
    readonly Residential: "RESIDENTIAL";
    readonly ResidentialIncome: "RESIDENTIAL_INCOME";
    readonly ResidentialLease: "RESIDENTIAL_LEASE";
};
export type ListingTypeEnum = typeof ListingTypeEnum[keyof typeof ListingTypeEnum];
/**
 * @export
 */
export declare const ListingSubTypeEnum: {
    readonly Apartment: "APARTMENT";
    readonly Condominium: "CONDOMINIUM";
    readonly Duplex: "DUPLEX";
    readonly Farm: "FARM";
    readonly SingleFamilyResidence: "SINGLE_FAMILY_RESIDENCE";
    readonly Timeshare: "TIMESHARE";
    readonly Townhouse: "TOWNHOUSE";
    readonly Office: "OFFICE";
};
export type ListingSubTypeEnum = typeof ListingSubTypeEnum[keyof typeof ListingSubTypeEnum];
/**
 * @export
 */
export declare const ListingStatusEnum: {
    readonly Draft: "DRAFT";
    readonly ComingSoon: "COMING_SOON";
    readonly ForSale: "FOR_SALE";
    readonly ForLease: "FOR_LEASE";
    readonly PendingSale: "PENDING_SALE";
    readonly PendingLease: "PENDING_LEASE";
    readonly Sold: "SOLD";
    readonly Leased: "LEASED";
    readonly OffMarket: "OFF_MARKET";
};
export type ListingStatusEnum = typeof ListingStatusEnum[keyof typeof ListingStatusEnum];
/**
 * @export
 */
export declare const ListingStandardStatusEnum: {
    readonly Active: "ACTIVE";
    readonly ActiveUnderContract: "ACTIVE_UNDER_CONTRACT";
    readonly Canceled: "CANCELED";
    readonly Closed: "CLOSED";
    readonly ComingSoon: "COMING_SOON";
    readonly Delete: "DELETE";
    readonly Expired: "EXPIRED";
    readonly Hold: "HOLD";
    readonly Incomplete: "INCOMPLETE";
    readonly Pending: "PENDING";
    readonly Withdrawn: "WITHDRAWN";
};
export type ListingStandardStatusEnum = typeof ListingStandardStatusEnum[keyof typeof ListingStandardStatusEnum];
/**
 * Check if a given object implements the Listing interface.
 */
export declare function instanceOfListing(value: object): value is Listing;
export declare function ListingFromJSON(json: any): Listing;
export declare function ListingFromJSONTyped(json: any, ignoreDiscriminator: boolean): Listing;
export declare function ListingToJSON(json: any): Listing;
export declare function ListingToJSONTyped(value?: Listing | null, ignoreDiscriminator?: boolean): any;
