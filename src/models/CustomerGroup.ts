/* tslint:disable */
/* eslint-disable */
/**
 * Aryeo
 * # Introduction The Aryeo API provides access to the Aryeo platform.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: jarrodp@zillowgroup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Group } from './Group';
import {
    GroupFromJSON,
    GroupToJSON
} from './Group';

/**
 * Customer groups are used to group multiple customers together, allowing you to apply settings such as price overrides and billing customer configurations in bulk.
 * @export
 * @interface CustomerGroup
 */
export interface CustomerGroup {
    /**
     * ID of the address. UUID Version 4.
     * @type {string}
     * @memberof CustomerGroup
     */
    id: string;
    /**
     * The name of the customer group.
     * @type {string}
     * @memberof CustomerGroup
     */
    name: string;
    /**
     * The affliate ID for the customer group.
     * @type {string}
     * @memberof CustomerGroup
     */
    affiliateId?: string | null;
    /**
     * 
     * @type {Group}
     * @memberof CustomerGroup
     */
    billingCustomer?: Group;
}

/**
 * Check if a given object implements the CustomerGroup interface.
 */
export function instanceOfCustomerGroup(value: object): value is CustomerGroup {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    return true;
}

export function CustomerGroupFromJSON(json: any): CustomerGroup {
    return CustomerGroupFromJSONTyped(json, false);
}

export function CustomerGroupFromJSONTyped(json: any, ignoreDiscriminator: boolean): CustomerGroup {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'name': json['name'],
        'affiliateId': json['affiliate_id'] == null ? undefined : json['affiliate_id'],
        'billingCustomer': json['billing_customer'] == null ? undefined : GroupFromJSON(json['billing_customer']),
    };
}

export function CustomerGroupToJSON(json: any): CustomerGroup {
    return CustomerGroupToJSONTyped(json, false);
}

export function CustomerGroupToJSONTyped(value?: CustomerGroup | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'name': value['name'],
        'affiliate_id': value['affiliateId'],
        'billing_customer': GroupToJSON(value['billingCustomer']),
    };
}

