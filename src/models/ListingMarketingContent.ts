/* tslint:disable */
/* eslint-disable */
/**
 * Aryeo
 * # Introduction The Aryeo API provides access to the Aryeo platform.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: jarrodp@zillowgroup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Address } from './Address';
import {
    AddressFromJSON,
    AddressToJSON
} from './Address';
import type { FloorPlan } from './FloorPlan';
import {
    FloorPlanFromJSON,
    FloorPlanToJSON
} from './FloorPlan';
import type { Group } from './Group';
import {
    GroupFromJSON,
    GroupToJSON
} from './Group';
import type { Image } from './Image';
import {
    ImageFromJSON,
    ImageToJSON
} from './Image';
import type { ListingBuilding } from './ListingBuilding';
import {
    ListingBuildingFromJSON,
    ListingBuildingToJSON
} from './ListingBuilding';
import type { ListingLot } from './ListingLot';
import {
    ListingLotFromJSON,
    ListingLotToJSON
} from './ListingLot';
import type { ListingPrice } from './ListingPrice';
import {
    ListingPriceFromJSON,
    ListingPriceToJSON
} from './ListingPrice';

/**
 * Marketing content for a listing (photos, floorplans, property details, etc).
 * @export
 * @interface ListingMarketingContent
 */
export interface ListingMarketingContent {
    /**
     * ID of the listing. UUID Version 4.
     * @type {string}
     * @memberof ListingMarketingContent
     */
    id?: string;
    /**
     * 
     * @type {Address}
     * @memberof ListingMarketingContent
     */
    address?: Address;
    /**
     * The identifier for a listing on its local MLS. 
     * @type {string}
     * @memberof ListingMarketingContent
     */
    mlsNumber?: string | null;
    /**
     * Further specifies the listing type. Examples include family residence and condominium.
     * @type {string}
     * @memberof ListingMarketingContent
     */
    subType?: ListingMarketingContentSubTypeEnum | null;
    /**
     * Local, regional, or otherwise custom status for the listing used by the parties involved in the listing transaction. While variable, these statuses are typically mapped to the listing's standard status.
     * @type {string}
     * @memberof ListingMarketingContent
     */
    status: ListingMarketingContentStatusEnum | null;
    /**
     * Description of the selling points of the building and/or land for sale. 
     * @type {string}
     * @memberof ListingMarketingContent
     */
    description?: string | null;
    /**
     * 
     * @type {ListingLot}
     * @memberof ListingMarketingContent
     */
    lot?: ListingLot;
    /**
     * 
     * @type {ListingBuilding}
     * @memberof ListingMarketingContent
     */
    building?: ListingBuilding;
    /**
     * 
     * @type {ListingPrice}
     * @memberof ListingMarketingContent
     */
    price?: ListingPrice;
    /**
     * Photos
     * @type {Array<Image>}
     * @memberof ListingMarketingContent
     */
    images?: Array<Image> | null;
    /**
     * Floorplans
     * @type {Array<FloorPlan>}
     * @memberof ListingMarketingContent
     */
    floorPlans?: Array<FloorPlan> | null;
    /**
     * 
     * @type {Group}
     * @memberof ListingMarketingContent
     */
    listAgent?: Group;
    /**
     * 
     * @type {Group}
     * @memberof ListingMarketingContent
     */
    coListAgent?: Group;
    /**
     * 
     * @type {Group}
     * @memberof ListingMarketingContent
     */
    vendor?: Group;
}


/**
 * @export
 */
export const ListingMarketingContentSubTypeEnum = {
    Apartment: 'APARTMENT',
    Condominium: 'CONDOMINIUM',
    Duplex: 'DUPLEX',
    Farm: 'FARM',
    SingleFamilyResidence: 'SINGLE_FAMILY_RESIDENCE',
    Timeshare: 'TIMESHARE',
    Townhouse: 'TOWNHOUSE',
    Office: 'OFFICE'
} as const;
export type ListingMarketingContentSubTypeEnum = typeof ListingMarketingContentSubTypeEnum[keyof typeof ListingMarketingContentSubTypeEnum];

/**
 * @export
 */
export const ListingMarketingContentStatusEnum = {
    Draft: 'DRAFT',
    ComingSoon: 'COMING_SOON',
    ForSale: 'FOR_SALE',
    ForLease: 'FOR_LEASE',
    PendingSale: 'PENDING_SALE',
    PendingLease: 'PENDING_LEASE',
    Sold: 'SOLD',
    Leased: 'LEASED',
    OffMarket: 'OFF_MARKET'
} as const;
export type ListingMarketingContentStatusEnum = typeof ListingMarketingContentStatusEnum[keyof typeof ListingMarketingContentStatusEnum];


/**
 * Check if a given object implements the ListingMarketingContent interface.
 */
export function instanceOfListingMarketingContent(value: object): value is ListingMarketingContent {
    if (!('status' in value) || value['status'] === undefined) return false;
    return true;
}

export function ListingMarketingContentFromJSON(json: any): ListingMarketingContent {
    return ListingMarketingContentFromJSONTyped(json, false);
}

export function ListingMarketingContentFromJSONTyped(json: any, ignoreDiscriminator: boolean): ListingMarketingContent {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'address': json['address'] == null ? undefined : AddressFromJSON(json['address']),
        'mlsNumber': json['mls_number'] == null ? undefined : json['mls_number'],
        'subType': json['sub_type'] == null ? undefined : json['sub_type'],
        'status': json['status'],
        'description': json['description'] == null ? undefined : json['description'],
        'lot': json['lot'] == null ? undefined : ListingLotFromJSON(json['lot']),
        'building': json['building'] == null ? undefined : ListingBuildingFromJSON(json['building']),
        'price': json['price'] == null ? undefined : ListingPriceFromJSON(json['price']),
        'images': json['images'] == null ? undefined : ((json['images'] as Array<any>).map(ImageFromJSON)),
        'floorPlans': json['floor_plans'] == null ? undefined : ((json['floor_plans'] as Array<any>).map(FloorPlanFromJSON)),
        'listAgent': json['list_agent'] == null ? undefined : GroupFromJSON(json['list_agent']),
        'coListAgent': json['co_list_agent'] == null ? undefined : GroupFromJSON(json['co_list_agent']),
        'vendor': json['vendor'] == null ? undefined : GroupFromJSON(json['vendor']),
    };
}

export function ListingMarketingContentToJSON(json: any): ListingMarketingContent {
    return ListingMarketingContentToJSONTyped(json, false);
}

export function ListingMarketingContentToJSONTyped(value?: ListingMarketingContent | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'address': AddressToJSON(value['address']),
        'mls_number': value['mlsNumber'],
        'sub_type': value['subType'],
        'status': value['status'],
        'description': value['description'],
        'lot': ListingLotToJSON(value['lot']),
        'building': ListingBuildingToJSON(value['building']),
        'price': ListingPriceToJSON(value['price']),
        'images': value['images'] == null ? undefined : ((value['images'] as Array<any>).map(ImageToJSON)),
        'floor_plans': value['floorPlans'] == null ? undefined : ((value['floorPlans'] as Array<any>).map(FloorPlanToJSON)),
        'list_agent': GroupToJSON(value['listAgent']),
        'co_list_agent': GroupToJSON(value['coListAgent']),
        'vendor': GroupToJSON(value['vendor']),
    };
}

