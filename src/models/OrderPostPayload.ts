/* tslint:disable */
/* eslint-disable */
/**
 * Aryeo
 * # Introduction The Aryeo API provides access to the Aryeo platform.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: jarrodp@zillowgroup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { OrderPostPayloadProductItemsInner } from './OrderPostPayloadProductItemsInner';
import {
    OrderPostPayloadProductItemsInnerFromJSON,
    OrderPostPayloadProductItemsInnerToJSON
} from './OrderPostPayloadProductItemsInner';

/**
 * Payload for creating an order.
 * @export
 * @interface OrderPostPayload
 */
export interface OrderPostPayload {
    /**
     * The fulfillment status of the order. Defaults to 'UNFULFILLED'.
     * @type {string}
     * @memberof OrderPostPayload
     */
    fulfillmentStatus?: OrderPostPayloadFulfillmentStatusEnum | null;
    /**
     * Internal notes that will be attached to the order. Viewable only by the team.
     * @type {string}
     * @memberof OrderPostPayload
     */
    internalNotes?: string | null;
    /**
     * ID of the address to associate with the order. UUID Version 4.
     * @type {string}
     * @memberof OrderPostPayload
     */
    addressId?: string;
    /**
     * ID of the customer to associate with the order. UUID Version 4.
     * @type {string}
     * @memberof OrderPostPayload
     */
    customerId?: string;
    /**
     * Indicates if the customer and creator notifications should be sent when creating the order. Requires an address and customer to be set in order for the notifications to be sent.
     * @type {boolean}
     * @memberof OrderPostPayload
     */
    notify?: boolean | null;
    /**
     * Indicates if the downloads for the attached listing should be locked while there is an outstanding balance on the order.
     * @type {boolean}
     * @memberof OrderPostPayload
     */
    lockDownloadForPayment?: boolean | null;
    /**
     * Indicates if the order will allow payments from the customer before the order is marked as fulfilled.
     * @type {boolean}
     * @memberof OrderPostPayload
     */
    allowPaymentsBeforeFulfillment?: boolean | null;
    /**
     * An array of product items.
     * @type {Array<OrderPostPayloadProductItemsInner>}
     * @memberof OrderPostPayload
     */
    productItems?: Array<OrderPostPayloadProductItemsInner>;
}


/**
 * @export
 */
export const OrderPostPayloadFulfillmentStatusEnum = {
    Fulfilled: 'FULFILLED',
    Unfulfilled: 'UNFULFILLED'
} as const;
export type OrderPostPayloadFulfillmentStatusEnum = typeof OrderPostPayloadFulfillmentStatusEnum[keyof typeof OrderPostPayloadFulfillmentStatusEnum];


/**
 * Check if a given object implements the OrderPostPayload interface.
 */
export function instanceOfOrderPostPayload(value: object): value is OrderPostPayload {
    return true;
}

export function OrderPostPayloadFromJSON(json: any): OrderPostPayload {
    return OrderPostPayloadFromJSONTyped(json, false);
}

export function OrderPostPayloadFromJSONTyped(json: any, ignoreDiscriminator: boolean): OrderPostPayload {
    if (json == null) {
        return json;
    }
    return {
        
        'fulfillmentStatus': json['fulfillment_status'] == null ? undefined : json['fulfillment_status'],
        'internalNotes': json['internal_notes'] == null ? undefined : json['internal_notes'],
        'addressId': json['address_id'] == null ? undefined : json['address_id'],
        'customerId': json['customer_id'] == null ? undefined : json['customer_id'],
        'notify': json['notify'] == null ? undefined : json['notify'],
        'lockDownloadForPayment': json['lock_download_for_payment'] == null ? undefined : json['lock_download_for_payment'],
        'allowPaymentsBeforeFulfillment': json['allow_payments_before_fulfillment'] == null ? undefined : json['allow_payments_before_fulfillment'],
        'productItems': json['product_items'] == null ? undefined : ((json['product_items'] as Array<any>).map(OrderPostPayloadProductItemsInnerFromJSON)),
    };
}

export function OrderPostPayloadToJSON(json: any): OrderPostPayload {
    return OrderPostPayloadToJSONTyped(json, false);
}

export function OrderPostPayloadToJSONTyped(value?: OrderPostPayload | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'fulfillment_status': value['fulfillmentStatus'],
        'internal_notes': value['internalNotes'],
        'address_id': value['addressId'],
        'customer_id': value['customerId'],
        'notify': value['notify'],
        'lock_download_for_payment': value['lockDownloadForPayment'],
        'allow_payments_before_fulfillment': value['allowPaymentsBeforeFulfillment'],
        'product_items': value['productItems'] == null ? undefined : ((value['productItems'] as Array<any>).map(OrderPostPayloadProductItemsInnerToJSON)),
    };
}

