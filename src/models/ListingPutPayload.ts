/* tslint:disable */
/* eslint-disable */
/**
 * Aryeo
 * # Introduction The Aryeo API provides access to the Aryeo platform.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: jarrodp@zillowgroup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 * Payload for updating a listing.
 * @export
 * @interface ListingPutPayload
 */
export interface ListingPutPayload {
    /**
     * The title of the listing.
     * @type {string}
     * @memberof ListingPutPayload
     */
    title?: string | null;
    /**
     * The description of the listing.
     * @type {string}
     * @memberof ListingPutPayload
     */
    description?: string | null;
    /**
     * The status of the listing.
     * @type {string}
     * @memberof ListingPutPayload
     */
    status?: string | null;
    /**
     * The date the MLS listing will go live.
     * @type {Date}
     * @memberof ListingPutPayload
     */
    mlsLiveDate?: Date | null;
    /**
     * The MLS number of the listing.
     * @type {string}
     * @memberof ListingPutPayload
     */
    mlsNumber?: string | null;
    /**
     * The price of the listing property.
     * @type {number}
     * @memberof ListingPutPayload
     */
    price?: number | null;
    /**
     * A decimal value representing the number of bedrooms for the listing.
     * @type {number}
     * @memberof ListingPutPayload
     */
    bedrooms?: number | null;
    /**
     * A decimal value representing the number of bathrooms for the listing.
     * @type {number}
     * @memberof ListingPutPayload
     */
    bathrooms?: number | null;
    /**
     * A decimal value representing the square footage the listing.
     * @type {number}
     * @memberof ListingPutPayload
     */
    homeSquarefootage?: number | null;
    /**
     * A decimal value representing the acreage the listing.
     * @type {number}
     * @memberof ListingPutPayload
     */
    lotAcres?: number | null;
    /**
     * A decimal value representing the number of parking spots for the listing.
     * @type {number}
     * @memberof ListingPutPayload
     */
    parkingSpots?: number | null;
    /**
     * The year the house for the listing was built.
     * @type {number}
     * @memberof ListingPutPayload
     */
    yearBuilt?: number | null;
    /**
     * The type of the listing.
     * @type {string}
     * @memberof ListingPutPayload
     */
    propertyType?: string | null;
}

/**
 * Check if a given object implements the ListingPutPayload interface.
 */
export function instanceOfListingPutPayload(value: object): value is ListingPutPayload {
    return true;
}

export function ListingPutPayloadFromJSON(json: any): ListingPutPayload {
    return ListingPutPayloadFromJSONTyped(json, false);
}

export function ListingPutPayloadFromJSONTyped(json: any, ignoreDiscriminator: boolean): ListingPutPayload {
    if (json == null) {
        return json;
    }
    return {
        
        'title': json['title'] == null ? undefined : json['title'],
        'description': json['description'] == null ? undefined : json['description'],
        'status': json['status'] == null ? undefined : json['status'],
        'mlsLiveDate': json['mls_live_date'] == null ? undefined : (new Date(json['mls_live_date'])),
        'mlsNumber': json['mls_number'] == null ? undefined : json['mls_number'],
        'price': json['price'] == null ? undefined : json['price'],
        'bedrooms': json['bedrooms'] == null ? undefined : json['bedrooms'],
        'bathrooms': json['bathrooms'] == null ? undefined : json['bathrooms'],
        'homeSquarefootage': json['home_squarefootage'] == null ? undefined : json['home_squarefootage'],
        'lotAcres': json['lot_acres'] == null ? undefined : json['lot_acres'],
        'parkingSpots': json['parking_spots'] == null ? undefined : json['parking_spots'],
        'yearBuilt': json['year_built'] == null ? undefined : json['year_built'],
        'propertyType': json['property_type'] == null ? undefined : json['property_type'],
    };
}

export function ListingPutPayloadToJSON(json: any): ListingPutPayload {
    return ListingPutPayloadToJSONTyped(json, false);
}

export function ListingPutPayloadToJSONTyped(value?: ListingPutPayload | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'title': value['title'],
        'description': value['description'],
        'status': value['status'],
        'mls_live_date': value['mlsLiveDate'] == null ? undefined : ((value['mlsLiveDate'] as any).toISOString().substring(0,10)),
        'mls_number': value['mlsNumber'],
        'price': value['price'],
        'bedrooms': value['bedrooms'],
        'bathrooms': value['bathrooms'],
        'home_squarefootage': value['homeSquarefootage'],
        'lot_acres': value['lotAcres'],
        'parking_spots': value['parkingSpots'],
        'year_built': value['yearBuilt'],
        'property_type': value['propertyType'],
    };
}

