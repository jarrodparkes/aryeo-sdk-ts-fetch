/* tslint:disable */
/* eslint-disable */
/**
 * Aryeo
 * # Introduction The Aryeo API provides access to the Aryeo platform.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: jarrodp@zillowgroup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Address } from './Address';
import {
    AddressFromJSON,
    AddressToJSON
} from './Address';
import type { Coupon } from './Coupon';
import {
    CouponFromJSON,
    CouponToJSON
} from './Coupon';
import type { Group } from './Group';
import {
    GroupFromJSON,
    GroupToJSON
} from './Group';
import type { OrderForm } from './OrderForm';
import {
    OrderFormFromJSON,
    OrderFormToJSON
} from './OrderForm';
import type { OrderFormSessionStepVisibility } from './OrderFormSessionStepVisibility';
import {
    OrderFormSessionStepVisibilityFromJSON,
    OrderFormSessionStepVisibilityToJSON
} from './OrderFormSessionStepVisibility';

/**
 * An order form session is used to pre-fill information about an order being placed via an order form. Through the session, you can also configure other display settings for an order form during that session. 
 * @export
 * @interface OrderFormSession
 */
export interface OrderFormSession {
    /**
     * ID of the order form. UUID Version 4.
     * @type {string}
     * @memberof OrderFormSession
     */
    id: string;
    /**
     * 
     * @type {OrderForm}
     * @memberof OrderFormSession
     */
    orderForm?: OrderForm;
    /**
     * 
     * @type {Address}
     * @memberof OrderFormSession
     */
    address?: Address;
    /**
     * 
     * @type {Group}
     * @memberof OrderFormSession
     */
    customer?: Group;
    /**
     * Coupons that should be automatically applied during this order form session.
     * @type {Array<Coupon>}
     * @memberof OrderFormSession
     */
    coupons?: Array<Coupon>;
    /**
     * If the header of the order form is hidden or shown during the booking process.
     * @type {boolean}
     * @memberof OrderFormSession
     */
    showHeader?: boolean;
    /**
     * 
     * @type {OrderFormSessionStepVisibility}
     * @memberof OrderFormSession
     */
    stepVisibility?: OrderFormSessionStepVisibility;
    /**
     * The URL the customer will be directed to after the payment or order placement is successful. By default, customers are directed to the Aryeo order confirmation page.
     * @type {string}
     * @memberof OrderFormSession
     */
    successUrl?: string;
    /**
     * The URL of the order form session. Redirect customers to this URL to take them to correct order form.
     * @type {string}
     * @memberof OrderFormSession
     */
    url?: string;
}

/**
 * Check if a given object implements the OrderFormSession interface.
 */
export function instanceOfOrderFormSession(value: object): value is OrderFormSession {
    if (!('id' in value) || value['id'] === undefined) return false;
    return true;
}

export function OrderFormSessionFromJSON(json: any): OrderFormSession {
    return OrderFormSessionFromJSONTyped(json, false);
}

export function OrderFormSessionFromJSONTyped(json: any, ignoreDiscriminator: boolean): OrderFormSession {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'orderForm': json['order_form'] == null ? undefined : OrderFormFromJSON(json['order_form']),
        'address': json['address'] == null ? undefined : AddressFromJSON(json['address']),
        'customer': json['customer'] == null ? undefined : GroupFromJSON(json['customer']),
        'coupons': json['coupons'] == null ? undefined : ((json['coupons'] as Array<any>).map(CouponFromJSON)),
        'showHeader': json['show_header'] == null ? undefined : json['show_header'],
        'stepVisibility': json['step_visibility'] == null ? undefined : OrderFormSessionStepVisibilityFromJSON(json['step_visibility']),
        'successUrl': json['success_url'] == null ? undefined : json['success_url'],
        'url': json['url'] == null ? undefined : json['url'],
    };
}

export function OrderFormSessionToJSON(json: any): OrderFormSession {
    return OrderFormSessionToJSONTyped(json, false);
}

export function OrderFormSessionToJSONTyped(value?: OrderFormSession | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'order_form': OrderFormToJSON(value['orderForm']),
        'address': AddressToJSON(value['address']),
        'customer': GroupToJSON(value['customer']),
        'coupons': value['coupons'] == null ? undefined : ((value['coupons'] as Array<any>).map(CouponToJSON)),
        'show_header': value['showHeader'],
        'step_visibility': OrderFormSessionStepVisibilityToJSON(value['stepVisibility']),
        'success_url': value['successUrl'],
        'url': value['url'],
    };
}

