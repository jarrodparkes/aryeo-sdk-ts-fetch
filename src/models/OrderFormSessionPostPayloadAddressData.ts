/* tslint:disable */
/* eslint-disable */
/**
 * Aryeo
 * # Introduction The Aryeo API provides access to the Aryeo platform.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: jarrodp@zillowgroup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 * Data used to generate a new Address object inline. If you create an address upfront, pass the address_id parameter. Otherwise, this address_data will be used to scaffold a new Address object, if present.
 * @export
 * @interface OrderFormSessionPostPayloadAddressData
 */
export interface OrderFormSessionPostPayloadAddressData {
    /**
     * The geographic latitude of some reference point of the location, specified in degrees and decimal parts. Positive numbers must not include the plus symbol.
     * @type {number}
     * @memberof OrderFormSessionPostPayloadAddressData
     */
    latitude?: number | null;
    /**
     * The geographic longitude of some reference point of the location, specified in degrees and decimal parts. Positive numbers must not include the plus symbol.
     * @type {number}
     * @memberof OrderFormSessionPostPayloadAddressData
     */
    longitude?: number | null;
    /**
     * The street number portion of a location's address. In some areas, the street number may contain non-numeric characters. This field can also contain extensions and modifiers to the street number, such as '1/2' or '-B'.
     * @type {string}
     * @memberof OrderFormSessionPostPayloadAddressData
     */
    streetNumber?: string | null;
    /**
     * The street name portion of a location's address.
     * @type {string}
     * @memberof OrderFormSessionPostPayloadAddressData
     */
    streetName?: string | null;
    /**
     * The number or portion of a larger building or complex. Examples are: 'APT G', '55', etc.
     * @type {string}
     * @memberof OrderFormSessionPostPayloadAddressData
     */
    unitNumber?: string | null;
    /**
     * The postal code portion of a location's address.
     * @type {string}
     * @memberof OrderFormSessionPostPayloadAddressData
     */
    postalCode?: string | null;
    /**
     * The city of a location's address.
     * @type {string}
     * @memberof OrderFormSessionPostPayloadAddressData
     */
    city?: string | null;
    /**
     * A sub-section or area of a defined city. Examples would be SoHo in New York, NY, Ironbound in Newark, NJ or Inside the Beltway.
     * @type {string}
     * @memberof OrderFormSessionPostPayloadAddressData
     */
    cityRegion?: string | null;
    /**
     * The County, Parish or other regional authority of the location.
     * @type {string}
     * @memberof OrderFormSessionPostPayloadAddressData
     */
    countyOrParish?: string | null;
    /**
     * The ISO 3166-2 subdivision code for the state or province of the location. For example, “MA” for Massachusetts, United States.
     * @type {string}
     * @memberof OrderFormSessionPostPayloadAddressData
     */
    stateOrProvince?: string | null;
    /**
     * A sub-section or area of a defined state or province. Examples would be the Keys in FL or Hudson Valley in NY.
     * @type {string}
     * @memberof OrderFormSessionPostPayloadAddressData
     */
    stateOrProvinceRegion?: string | null;
    /**
     * The ISO 3166-1 country code for this for the country of the location.
     * @type {string}
     * @memberof OrderFormSessionPostPayloadAddressData
     */
    country?: string | null;
    /**
     * A sub-section or area of a defined country. Examples would be Napa Valley in the US, or the Amalfi Coast in Italy.
     * @type {string}
     * @memberof OrderFormSessionPostPayloadAddressData
     */
    countryRegion?: string | null;
}

/**
 * Check if a given object implements the OrderFormSessionPostPayloadAddressData interface.
 */
export function instanceOfOrderFormSessionPostPayloadAddressData(value: object): value is OrderFormSessionPostPayloadAddressData {
    return true;
}

export function OrderFormSessionPostPayloadAddressDataFromJSON(json: any): OrderFormSessionPostPayloadAddressData {
    return OrderFormSessionPostPayloadAddressDataFromJSONTyped(json, false);
}

export function OrderFormSessionPostPayloadAddressDataFromJSONTyped(json: any, ignoreDiscriminator: boolean): OrderFormSessionPostPayloadAddressData {
    if (json == null) {
        return json;
    }
    return {
        
        'latitude': json['latitude'] == null ? undefined : json['latitude'],
        'longitude': json['longitude'] == null ? undefined : json['longitude'],
        'streetNumber': json['street_number'] == null ? undefined : json['street_number'],
        'streetName': json['street_name'] == null ? undefined : json['street_name'],
        'unitNumber': json['unit_number'] == null ? undefined : json['unit_number'],
        'postalCode': json['postal_code'] == null ? undefined : json['postal_code'],
        'city': json['city'] == null ? undefined : json['city'],
        'cityRegion': json['city_region'] == null ? undefined : json['city_region'],
        'countyOrParish': json['county_or_parish'] == null ? undefined : json['county_or_parish'],
        'stateOrProvince': json['state_or_province'] == null ? undefined : json['state_or_province'],
        'stateOrProvinceRegion': json['state_or_province_region'] == null ? undefined : json['state_or_province_region'],
        'country': json['country'] == null ? undefined : json['country'],
        'countryRegion': json['country_region'] == null ? undefined : json['country_region'],
    };
}

export function OrderFormSessionPostPayloadAddressDataToJSON(json: any): OrderFormSessionPostPayloadAddressData {
    return OrderFormSessionPostPayloadAddressDataToJSONTyped(json, false);
}

export function OrderFormSessionPostPayloadAddressDataToJSONTyped(value?: OrderFormSessionPostPayloadAddressData | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'latitude': value['latitude'],
        'longitude': value['longitude'],
        'street_number': value['streetNumber'],
        'street_name': value['streetName'],
        'unit_number': value['unitNumber'],
        'postal_code': value['postalCode'],
        'city': value['city'],
        'city_region': value['cityRegion'],
        'county_or_parish': value['countyOrParish'],
        'state_or_province': value['stateOrProvince'],
        'state_or_province_region': value['stateOrProvinceRegion'],
        'country': value['country'],
        'country_region': value['countryRegion'],
    };
}

