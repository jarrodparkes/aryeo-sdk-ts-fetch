/* tslint:disable */
/* eslint-disable */
/**
 * Aryeo
 * # Introduction The Aryeo API provides access to the Aryeo platform.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: jarrodp@zillowgroup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';

export interface TasksTaskIdCompletePutRequest {
    taskId: string;
}

export interface TasksTaskIdDeleteRequest {
    taskId: string;
}

export interface TasksTaskIdGetRequest {
    taskId: string;
}

export interface TasksTaskIdPutRequest {
    taskId: string;
}

export interface TasksTaskIdReinstatePutRequest {
    taskId: string;
}

/**
 * 
 */
export class TasksApi extends runtime.BaseAPI {

    /**
     * command-palette-commands-get
     */
    async commandPaletteCommandsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/command-palette/commands`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * command-palette-commands-get
     */
    async commandPaletteCommandsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.commandPaletteCommandsGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * tasks-get
     */
    async tasksGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/tasks`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * tasks-get
     */
    async tasksGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.tasksGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * tasks-post
     */
    async tasksPostRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/tasks`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * tasks-post
     */
    async tasksPost(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.tasksPostRaw(initOverrides);
        return await response.value();
    }

    /**
     * tasks-task-id-complete-put
     */
    async tasksTaskIdCompletePutRaw(requestParameters: TasksTaskIdCompletePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['taskId'] == null) {
            throw new runtime.RequiredError(
                'taskId',
                'Required parameter "taskId" was null or undefined when calling tasksTaskIdCompletePut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/tasks/{task_id}/complete`.replace(`{${"task_id"}}`, encodeURIComponent(String(requestParameters['taskId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * tasks-task-id-complete-put
     */
    async tasksTaskIdCompletePut(requestParameters: TasksTaskIdCompletePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.tasksTaskIdCompletePutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * tasks-task-id-delete
     */
    async tasksTaskIdDeleteRaw(requestParameters: TasksTaskIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['taskId'] == null) {
            throw new runtime.RequiredError(
                'taskId',
                'Required parameter "taskId" was null or undefined when calling tasksTaskIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/tasks/{task_id}`.replace(`{${"task_id"}}`, encodeURIComponent(String(requestParameters['taskId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * tasks-task-id-delete
     */
    async tasksTaskIdDelete(requestParameters: TasksTaskIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.tasksTaskIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * tasks-task-id-get
     */
    async tasksTaskIdGetRaw(requestParameters: TasksTaskIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['taskId'] == null) {
            throw new runtime.RequiredError(
                'taskId',
                'Required parameter "taskId" was null or undefined when calling tasksTaskIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/tasks/{task_id}`.replace(`{${"task_id"}}`, encodeURIComponent(String(requestParameters['taskId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * tasks-task-id-get
     */
    async tasksTaskIdGet(requestParameters: TasksTaskIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.tasksTaskIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * tasks-task-id-put
     */
    async tasksTaskIdPutRaw(requestParameters: TasksTaskIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['taskId'] == null) {
            throw new runtime.RequiredError(
                'taskId',
                'Required parameter "taskId" was null or undefined when calling tasksTaskIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/tasks/{task_id}`.replace(`{${"task_id"}}`, encodeURIComponent(String(requestParameters['taskId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * tasks-task-id-put
     */
    async tasksTaskIdPut(requestParameters: TasksTaskIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.tasksTaskIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * tasks-task-id-reinstate-put
     */
    async tasksTaskIdReinstatePutRaw(requestParameters: TasksTaskIdReinstatePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['taskId'] == null) {
            throw new runtime.RequiredError(
                'taskId',
                'Required parameter "taskId" was null or undefined when calling tasksTaskIdReinstatePut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/tasks/{task_id}/reinstate`.replace(`{${"task_id"}}`, encodeURIComponent(String(requestParameters['taskId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * tasks-task-id-reinstate-put
     */
    async tasksTaskIdReinstatePut(requestParameters: TasksTaskIdReinstatePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.tasksTaskIdReinstatePutRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
