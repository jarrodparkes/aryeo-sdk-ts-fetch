/* tslint:disable */
/* eslint-disable */
/**
 * Aryeo
 * # Introduction The Aryeo API provides access to the Aryeo platform.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: jarrodp@zillowgroup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type {
    AppointmentCancelPutPayload,
    AppointmentCollection,
    AppointmentReschedulePutPayload,
    AppointmentResource,
    AppointmentUpdatePutPayload
} from '../models/index';
import {
    AppointmentCancelPutPayloadToJSON,
    AppointmentCollectionFromJSON,
    AppointmentReschedulePutPayloadToJSON,
    AppointmentResourceFromJSON,
    AppointmentUpdatePutPayloadToJSON
} from '../models/index';
import * as runtime from '../runtime';

export interface AppointmentsAppointmentId3dhTourLinkGetRequest {
    appointmentId: string;
}

export interface AppointmentsAppointmentIdAcceptPutRequest {
    appointmentId: string;
}

export interface AppointmentsAppointmentIdDeclinePutRequest {
    appointmentId: string;
}

export interface AppointmentsAppointmentIdPostponePutRequest {
    appointmentId: string;
}

export interface AppointmentsAppointmentIdSchedulePutRequest {
    appointmentId: string;
}

export interface GetAppointmentsRequest {
    aryeoGroupId: string;
    include?: string;
    filterTense?: GetAppointmentsFilterTenseEnum;
    filterStatuses?: Array<GetAppointmentsFilterStatusesEnum>;
    filterStartAtGte?: Date;
    filterStartAtLte?: Date;
    filterUserIds?: Array<string>;
    sort?: string;
    perPage?: string;
    page?: string;
}

export interface GetAppointmentsIdRequest {
    appointmentId: string;
    aryeoGroupId: string;
    include?: string;
}

export interface PutAppointmentsAppointmentIdRequest {
    appointmentId: string;
    aryeoGroupId: string;
    appointmentUpdatePutPayload?: AppointmentUpdatePutPayload;
}

export interface PutAppointmentsAppointmentIdCancelRequest {
    appointmentId: string;
    aryeoGroupId: string;
    appointmentCancelPutPayload?: AppointmentCancelPutPayload;
}

export interface PutAppointmentsAppointmentIdRescheduleRequest {
    appointmentId: string;
    aryeoGroupId: string;
    appointmentReschedulePutPayload?: AppointmentReschedulePutPayload;
}

/**
 * 
 */
export class AppointmentsApi extends runtime.BaseAPI {

    /**
     * appointments-appointment-id-3dh-tour-link-get
     */
    async appointmentsAppointmentId3dhTourLinkGetRaw(requestParameters: AppointmentsAppointmentId3dhTourLinkGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['appointmentId'] == null) {
            throw new runtime.RequiredError(
                'appointmentId',
                'Required parameter "appointmentId" was null or undefined when calling appointmentsAppointmentId3dhTourLinkGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/appointments/{appointment_id}/3dh-tour-link`.replace(`{${"appointment_id"}}`, encodeURIComponent(String(requestParameters['appointmentId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * appointments-appointment-id-3dh-tour-link-get
     */
    async appointmentsAppointmentId3dhTourLinkGet(requestParameters: AppointmentsAppointmentId3dhTourLinkGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.appointmentsAppointmentId3dhTourLinkGetRaw(requestParameters, initOverrides);
    }

    /**
     * appointments-appointment-id-accept-put
     */
    async appointmentsAppointmentIdAcceptPutRaw(requestParameters: AppointmentsAppointmentIdAcceptPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['appointmentId'] == null) {
            throw new runtime.RequiredError(
                'appointmentId',
                'Required parameter "appointmentId" was null or undefined when calling appointmentsAppointmentIdAcceptPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/appointments/{appointment_id}/accept`.replace(`{${"appointment_id"}}`, encodeURIComponent(String(requestParameters['appointmentId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * appointments-appointment-id-accept-put
     */
    async appointmentsAppointmentIdAcceptPut(requestParameters: AppointmentsAppointmentIdAcceptPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.appointmentsAppointmentIdAcceptPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * appointments-appointment-id-decline-put
     */
    async appointmentsAppointmentIdDeclinePutRaw(requestParameters: AppointmentsAppointmentIdDeclinePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['appointmentId'] == null) {
            throw new runtime.RequiredError(
                'appointmentId',
                'Required parameter "appointmentId" was null or undefined when calling appointmentsAppointmentIdDeclinePut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/appointments/{appointment_id}/decline`.replace(`{${"appointment_id"}}`, encodeURIComponent(String(requestParameters['appointmentId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * appointments-appointment-id-decline-put
     */
    async appointmentsAppointmentIdDeclinePut(requestParameters: AppointmentsAppointmentIdDeclinePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.appointmentsAppointmentIdDeclinePutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * appointments-appointment-id-postpone-put
     */
    async appointmentsAppointmentIdPostponePutRaw(requestParameters: AppointmentsAppointmentIdPostponePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['appointmentId'] == null) {
            throw new runtime.RequiredError(
                'appointmentId',
                'Required parameter "appointmentId" was null or undefined when calling appointmentsAppointmentIdPostponePut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/appointments/{appointment_id}/postpone`.replace(`{${"appointment_id"}}`, encodeURIComponent(String(requestParameters['appointmentId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * appointments-appointment-id-postpone-put
     */
    async appointmentsAppointmentIdPostponePut(requestParameters: AppointmentsAppointmentIdPostponePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.appointmentsAppointmentIdPostponePutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * appointments-appointment-id-schedule-put
     */
    async appointmentsAppointmentIdSchedulePutRaw(requestParameters: AppointmentsAppointmentIdSchedulePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['appointmentId'] == null) {
            throw new runtime.RequiredError(
                'appointmentId',
                'Required parameter "appointmentId" was null or undefined when calling appointmentsAppointmentIdSchedulePut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/appointments/{appointment_id}/schedule`.replace(`{${"appointment_id"}}`, encodeURIComponent(String(requestParameters['appointmentId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * appointments-appointment-id-schedule-put
     */
    async appointmentsAppointmentIdSchedulePut(requestParameters: AppointmentsAppointmentIdSchedulePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.appointmentsAppointmentIdSchedulePutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * appointments-store-post
     */
    async appointmentsStorePostRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/appointments/store`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * appointments-store-post
     */
    async appointmentsStorePost(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.appointmentsStorePostRaw(initOverrides);
        return await response.value();
    }

    /**
     * List all appointments. By default, returns a list of appointments that have been scheduled and have not been canceled
     */
    async getAppointmentsRaw(requestParameters: GetAppointmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppointmentCollection>> {
        if (requestParameters['aryeoGroupId'] == null) {
            throw new runtime.RequiredError(
                'aryeoGroupId',
                'Required parameter "aryeoGroupId" was null or undefined when calling getAppointments().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        if (requestParameters['filterTense'] != null) {
            queryParameters['filter[tense]'] = requestParameters['filterTense'];
        }

        if (requestParameters['filterStatuses'] != null) {
            queryParameters['filter[statuses][]'] = requestParameters['filterStatuses']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['filterStartAtGte'] != null) {
            queryParameters['filter[start_at_gte]'] = (requestParameters['filterStartAtGte'] as any).toISOString();
        }

        if (requestParameters['filterStartAtLte'] != null) {
            queryParameters['filter[start_at_lte]'] = (requestParameters['filterStartAtLte'] as any).toISOString();
        }

        if (requestParameters['filterUserIds'] != null) {
            queryParameters['filter[user_ids][]'] = requestParameters['filterUserIds']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        if (requestParameters['perPage'] != null) {
            queryParameters['per_page'] = requestParameters['perPage'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['aryeoGroupId'] != null) {
            headerParameters['Aryeo-Group-Id'] = String(requestParameters['aryeoGroupId']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/appointments`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppointmentCollectionFromJSON(jsonValue));
    }

    /**
     * List all appointments. By default, returns a list of appointments that have been scheduled and have not been canceled
     */
    async getAppointments(requestParameters: GetAppointmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppointmentCollection> {
        const response = await this.getAppointmentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves the details of an appointment with the given ID.
     */
    async getAppointmentsIdRaw(requestParameters: GetAppointmentsIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppointmentResource>> {
        if (requestParameters['appointmentId'] == null) {
            throw new runtime.RequiredError(
                'appointmentId',
                'Required parameter "appointmentId" was null or undefined when calling getAppointmentsId().'
            );
        }

        if (requestParameters['aryeoGroupId'] == null) {
            throw new runtime.RequiredError(
                'aryeoGroupId',
                'Required parameter "aryeoGroupId" was null or undefined when calling getAppointmentsId().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['aryeoGroupId'] != null) {
            headerParameters['Aryeo-Group-Id'] = String(requestParameters['aryeoGroupId']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/appointments/{appointment_id}`.replace(`{${"appointment_id"}}`, encodeURIComponent(String(requestParameters['appointmentId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppointmentResourceFromJSON(jsonValue));
    }

    /**
     * Retrieves the details of an appointment with the given ID.
     */
    async getAppointmentsId(requestParameters: GetAppointmentsIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppointmentResource> {
        const response = await this.getAppointmentsIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates the details of an appointment with the given ID.
     */
    async putAppointmentsAppointmentIdRaw(requestParameters: PutAppointmentsAppointmentIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppointmentResource>> {
        if (requestParameters['appointmentId'] == null) {
            throw new runtime.RequiredError(
                'appointmentId',
                'Required parameter "appointmentId" was null or undefined when calling putAppointmentsAppointmentId().'
            );
        }

        if (requestParameters['aryeoGroupId'] == null) {
            throw new runtime.RequiredError(
                'aryeoGroupId',
                'Required parameter "aryeoGroupId" was null or undefined when calling putAppointmentsAppointmentId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['aryeoGroupId'] != null) {
            headerParameters['Aryeo-Group-Id'] = String(requestParameters['aryeoGroupId']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/appointments/{appointment_id}`.replace(`{${"appointment_id"}}`, encodeURIComponent(String(requestParameters['appointmentId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AppointmentUpdatePutPayloadToJSON(requestParameters['appointmentUpdatePutPayload']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppointmentResourceFromJSON(jsonValue));
    }

    /**
     * Updates the details of an appointment with the given ID.
     */
    async putAppointmentsAppointmentId(requestParameters: PutAppointmentsAppointmentIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppointmentResource> {
        const response = await this.putAppointmentsAppointmentIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Cancel an appointment. The appointments order\'s customer can be optionally notified of this change.
     */
    async putAppointmentsAppointmentIdCancelRaw(requestParameters: PutAppointmentsAppointmentIdCancelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppointmentResource>> {
        if (requestParameters['appointmentId'] == null) {
            throw new runtime.RequiredError(
                'appointmentId',
                'Required parameter "appointmentId" was null or undefined when calling putAppointmentsAppointmentIdCancel().'
            );
        }

        if (requestParameters['aryeoGroupId'] == null) {
            throw new runtime.RequiredError(
                'aryeoGroupId',
                'Required parameter "aryeoGroupId" was null or undefined when calling putAppointmentsAppointmentIdCancel().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['aryeoGroupId'] != null) {
            headerParameters['Aryeo-Group-Id'] = String(requestParameters['aryeoGroupId']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/appointments/{appointment_id}/cancel`.replace(`{${"appointment_id"}}`, encodeURIComponent(String(requestParameters['appointmentId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AppointmentCancelPutPayloadToJSON(requestParameters['appointmentCancelPutPayload']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppointmentResourceFromJSON(jsonValue));
    }

    /**
     * Cancel an appointment. The appointments order\'s customer can be optionally notified of this change.
     */
    async putAppointmentsAppointmentIdCancel(requestParameters: PutAppointmentsAppointmentIdCancelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppointmentResource> {
        const response = await this.putAppointmentsAppointmentIdCancelRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Reschedule an appointment. The appointments order\'s customer can be optionally notified of this change.
     */
    async putAppointmentsAppointmentIdRescheduleRaw(requestParameters: PutAppointmentsAppointmentIdRescheduleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppointmentResource>> {
        if (requestParameters['appointmentId'] == null) {
            throw new runtime.RequiredError(
                'appointmentId',
                'Required parameter "appointmentId" was null or undefined when calling putAppointmentsAppointmentIdReschedule().'
            );
        }

        if (requestParameters['aryeoGroupId'] == null) {
            throw new runtime.RequiredError(
                'aryeoGroupId',
                'Required parameter "aryeoGroupId" was null or undefined when calling putAppointmentsAppointmentIdReschedule().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['aryeoGroupId'] != null) {
            headerParameters['Aryeo-Group-Id'] = String(requestParameters['aryeoGroupId']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/appointments/{appointment_id}/reschedule`.replace(`{${"appointment_id"}}`, encodeURIComponent(String(requestParameters['appointmentId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AppointmentReschedulePutPayloadToJSON(requestParameters['appointmentReschedulePutPayload']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppointmentResourceFromJSON(jsonValue));
    }

    /**
     * Reschedule an appointment. The appointments order\'s customer can be optionally notified of this change.
     */
    async putAppointmentsAppointmentIdReschedule(requestParameters: PutAppointmentsAppointmentIdRescheduleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppointmentResource> {
        const response = await this.putAppointmentsAppointmentIdRescheduleRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetAppointmentsFilterTenseEnum = {
    Past: 'PAST',
    Upcoming: 'UPCOMING'
} as const;
export type GetAppointmentsFilterTenseEnum = typeof GetAppointmentsFilterTenseEnum[keyof typeof GetAppointmentsFilterTenseEnum];
/**
 * @export
 */
export const GetAppointmentsFilterStatusesEnum = {
    Scheduled: 'SCHEDULED',
    Unscheduled: 'UNSCHEDULED',
    Canceled: 'CANCELED'
} as const;
export type GetAppointmentsFilterStatusesEnum = typeof GetAppointmentsFilterStatusesEnum[keyof typeof GetAppointmentsFilterStatusesEnum];
