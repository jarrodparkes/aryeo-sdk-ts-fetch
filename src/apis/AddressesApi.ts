/* tslint:disable */
/* eslint-disable */
/**
 * Aryeo
 * # Introduction The Aryeo API provides access to the Aryeo platform.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: jarrodp@zillowgroup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type {
    AddressPostPayload,
    AddressResource
} from '../models/index';
import {
    AddressPostPayloadToJSON,
    AddressResourceFromJSON
} from '../models/index';
import * as runtime from '../runtime';

export interface AddressesAddressGetRequest {
    address: string;
}

export interface AddressesAddressPatchRequest {
    address: string;
}

export interface PostAddressesRequest {
    aryeoGroupId?: string;
    addressPostPayload?: AddressPostPayload;
}

/**
 * 
 */
export class AddressesApi extends runtime.BaseAPI {

    /**
     * addresses-address-get
     */
    async addressesAddressGetRaw(requestParameters: AddressesAddressGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['address'] == null) {
            throw new runtime.RequiredError(
                'address',
                'Required parameter "address" was null or undefined when calling addressesAddressGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/addresses/{address}`.replace(`{${"address"}}`, encodeURIComponent(String(requestParameters['address']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * addresses-address-get
     */
    async addressesAddressGet(requestParameters: AddressesAddressGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.addressesAddressGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * addresses-address-patch
     */
    async addressesAddressPatchRaw(requestParameters: AddressesAddressPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['address'] == null) {
            throw new runtime.RequiredError(
                'address',
                'Required parameter "address" was null or undefined when calling addressesAddressPatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/addresses/{address}`.replace(`{${"address"}}`, encodeURIComponent(String(requestParameters['address']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * addresses-address-patch
     */
    async addressesAddressPatch(requestParameters: AddressesAddressPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.addressesAddressPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create an address.
     */
    async postAddressesRaw(requestParameters: PostAddressesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AddressResource>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['aryeoGroupId'] != null) {
            headerParameters['Aryeo-Group-Id'] = String(requestParameters['aryeoGroupId']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/addresses`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddressPostPayloadToJSON(requestParameters['addressPostPayload']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AddressResourceFromJSON(jsonValue));
    }

    /**
     * Create an address.
     */
    async postAddresses(requestParameters: PostAddressesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AddressResource> {
        const response = await this.postAddressesRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
