/* tslint:disable */
/* eslint-disable */
/**
 * Aryeo
 * # Introduction The Aryeo API provides access to the Aryeo platform.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: jarrodp@zillowgroup.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type {
    OrderCollection,
    OrderItemPostPayload,
    OrderItemResource,
    OrderPostPayload,
    OrderResource,
    OrderTagsPutPayload
} from '../models/index';
import {
    OrderCollectionFromJSON,
    OrderItemPostPayloadToJSON,
    OrderItemResourceFromJSON,
    OrderPostPayloadToJSON,
    OrderResourceFromJSON,
    OrderTagsPutPayloadToJSON
} from '../models/index';
import * as runtime from '../runtime';

export interface DeleteOrderItemsOrderItemIdRequest {
    orderItemId: string;
}

export interface GetOrderItemsOrderItemIdRequest {
    orderItemId: string;
    include?: string;
}

export interface GetOrdersRequest {
    aryeoGroupId: string;
    include?: string;
    filterSearch?: string;
    filterPaymentStatus?: string;
    filterFulfillmentStatus?: string;
    filterAppointmentStartAtGte?: Date;
    filterAppointmentStartAtLte?: Date;
    filterCreatorGroupId?: string;
    filterTagIds?: Array<string>;
    filterUserIds?: Array<string>;
    sort?: string;
    perPage?: string;
    page?: string;
}

export interface GetOrdersIdRequest {
    orderId: string;
    aryeoGroupId: string;
    include?: string;
}

export interface OrderItemsOrderItemIdPayRunItemDefaultsGetRequest {
    orderItemId: string;
}

export interface OrdersOrderBillingAddressPutRequest {
    order: string;
}

export interface OrdersOrderDiscountsDiscountDeleteRequest {
    order: string;
    discount: string;
}

export interface OrdersOrderIdNotesPutRequest {
    orderId: string;
}

export interface OrdersOrderIdPutRequest {
    orderId: string;
}

export interface OrdersOrderIdTagsPostRequest {
    orderId: string;
}

export interface OrdersOrderPaymentInfoGetRequest {
    order: string;
}

export interface PostOrderItemsRequest {
    aryeoGroupId: string;
    orderItemPostPayload?: OrderItemPostPayload;
}

export interface PostOrdersRequest {
    aryeoGroupId: string;
    orderPostPayload?: OrderPostPayload;
}

export interface PromotionCodesRedeemDiscountedTypeDiscountedPostRequest {
    discountedType: PromotionCodesRedeemDiscountedTypeDiscountedPostDiscountedTypeEnum;
    discounted: string;
}

export interface PutOrderItemsOrderItemIdRequest {
    orderItemId: string;
}

export interface PutOrderTagsTagIdRequest {
    orderId: string;
    aryeoGroupId: string;
    orderTagsPutPayload?: OrderTagsPutPayload;
}

export interface RefundsOrderPaymentPostRequest {
    orderPayment: string;
}

/**
 * 
 */
export class OrdersApi extends runtime.BaseAPI {

    /**
     * Delete an order item.
     */
    async deleteOrderItemsOrderItemIdRaw(requestParameters: DeleteOrderItemsOrderItemIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['orderItemId'] == null) {
            throw new runtime.RequiredError(
                'orderItemId',
                'Required parameter "orderItemId" was null or undefined when calling deleteOrderItemsOrderItemId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/order-items/{order_item_id}`.replace(`{${"order_item_id"}}`, encodeURIComponent(String(requestParameters['orderItemId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete an order item.
     */
    async deleteOrderItemsOrderItemId(requestParameters: DeleteOrderItemsOrderItemIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteOrderItemsOrderItemIdRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve an order item.
     */
    async getOrderItemsOrderItemIdRaw(requestParameters: GetOrderItemsOrderItemIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrderItemResource>> {
        if (requestParameters['orderItemId'] == null) {
            throw new runtime.RequiredError(
                'orderItemId',
                'Required parameter "orderItemId" was null or undefined when calling getOrderItemsOrderItemId().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/order-items/{order_item_id}`.replace(`{${"order_item_id"}}`, encodeURIComponent(String(requestParameters['orderItemId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderItemResourceFromJSON(jsonValue));
    }

    /**
     * Retrieve an order item.
     */
    async getOrderItemsOrderItemId(requestParameters: GetOrderItemsOrderItemIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrderItemResource> {
        const response = await this.getOrderItemsOrderItemIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Lists all orders of a group.
     */
    async getOrdersRaw(requestParameters: GetOrdersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrderCollection>> {
        if (requestParameters['aryeoGroupId'] == null) {
            throw new runtime.RequiredError(
                'aryeoGroupId',
                'Required parameter "aryeoGroupId" was null or undefined when calling getOrders().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        if (requestParameters['filterSearch'] != null) {
            queryParameters['filter[search]'] = requestParameters['filterSearch'];
        }

        if (requestParameters['filterPaymentStatus'] != null) {
            queryParameters['filter[payment_status]'] = requestParameters['filterPaymentStatus'];
        }

        if (requestParameters['filterFulfillmentStatus'] != null) {
            queryParameters['filter[fulfillment_status]'] = requestParameters['filterFulfillmentStatus'];
        }

        if (requestParameters['filterAppointmentStartAtGte'] != null) {
            queryParameters['filter[appointment_start_at_gte]'] = (requestParameters['filterAppointmentStartAtGte'] as any).toISOString();
        }

        if (requestParameters['filterAppointmentStartAtLte'] != null) {
            queryParameters['filter[appointment_start_at_lte]'] = (requestParameters['filterAppointmentStartAtLte'] as any).toISOString();
        }

        if (requestParameters['filterCreatorGroupId'] != null) {
            queryParameters['filter[creator_group_id]'] = requestParameters['filterCreatorGroupId'];
        }

        if (requestParameters['filterTagIds'] != null) {
            queryParameters['filter[tag_ids][]'] = requestParameters['filterTagIds']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['filterUserIds'] != null) {
            queryParameters['filter[user_ids][]'] = requestParameters['filterUserIds']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        if (requestParameters['perPage'] != null) {
            queryParameters['per_page'] = requestParameters['perPage'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['aryeoGroupId'] != null) {
            headerParameters['Aryeo-Group-Id'] = String(requestParameters['aryeoGroupId']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/orders`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderCollectionFromJSON(jsonValue));
    }

    /**
     * Lists all orders of a group.
     */
    async getOrders(requestParameters: GetOrdersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrderCollection> {
        const response = await this.getOrdersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves the details of an order with the given ID.
     */
    async getOrdersIdRaw(requestParameters: GetOrdersIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrderResource>> {
        if (requestParameters['orderId'] == null) {
            throw new runtime.RequiredError(
                'orderId',
                'Required parameter "orderId" was null or undefined when calling getOrdersId().'
            );
        }

        if (requestParameters['aryeoGroupId'] == null) {
            throw new runtime.RequiredError(
                'aryeoGroupId',
                'Required parameter "aryeoGroupId" was null or undefined when calling getOrdersId().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['include'] != null) {
            queryParameters['include'] = requestParameters['include'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['aryeoGroupId'] != null) {
            headerParameters['Aryeo-Group-Id'] = String(requestParameters['aryeoGroupId']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/orders/{order_id}`.replace(`{${"order_id"}}`, encodeURIComponent(String(requestParameters['orderId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderResourceFromJSON(jsonValue));
    }

    /**
     * Retrieves the details of an order with the given ID.
     */
    async getOrdersId(requestParameters: GetOrdersIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrderResource> {
        const response = await this.getOrdersIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * interactive-contents-url-check-post
     */
    async interactiveContentsUrlCheckPostRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/interactive-contents/url-check`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * interactive-contents-url-check-post
     */
    async interactiveContentsUrlCheckPost(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.interactiveContentsUrlCheckPostRaw(initOverrides);
        return await response.value();
    }

    /**
     * order-items-order-item-id-pay-run-item-defaults-get
     */
    async orderItemsOrderItemIdPayRunItemDefaultsGetRaw(requestParameters: OrderItemsOrderItemIdPayRunItemDefaultsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['orderItemId'] == null) {
            throw new runtime.RequiredError(
                'orderItemId',
                'Required parameter "orderItemId" was null or undefined when calling orderItemsOrderItemIdPayRunItemDefaultsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/order-items/{order_item_id}/pay-run-item-defaults`.replace(`{${"order_item_id"}}`, encodeURIComponent(String(requestParameters['orderItemId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * order-items-order-item-id-pay-run-item-defaults-get
     */
    async orderItemsOrderItemIdPayRunItemDefaultsGet(requestParameters: OrderItemsOrderItemIdPayRunItemDefaultsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.orderItemsOrderItemIdPayRunItemDefaultsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * orders-order-billing-address-put
     */
    async ordersOrderBillingAddressPutRaw(requestParameters: OrdersOrderBillingAddressPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['order'] == null) {
            throw new runtime.RequiredError(
                'order',
                'Required parameter "order" was null or undefined when calling ordersOrderBillingAddressPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/orders/{order}/billing-address`.replace(`{${"order"}}`, encodeURIComponent(String(requestParameters['order']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * orders-order-billing-address-put
     */
    async ordersOrderBillingAddressPut(requestParameters: OrdersOrderBillingAddressPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.ordersOrderBillingAddressPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * orders-order-discounts-discount-delete
     */
    async ordersOrderDiscountsDiscountDeleteRaw(requestParameters: OrdersOrderDiscountsDiscountDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['order'] == null) {
            throw new runtime.RequiredError(
                'order',
                'Required parameter "order" was null or undefined when calling ordersOrderDiscountsDiscountDelete().'
            );
        }

        if (requestParameters['discount'] == null) {
            throw new runtime.RequiredError(
                'discount',
                'Required parameter "discount" was null or undefined when calling ordersOrderDiscountsDiscountDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/orders/{order}/discounts/{discount}`.replace(`{${"order"}}`, encodeURIComponent(String(requestParameters['order']))).replace(`{${"discount"}}`, encodeURIComponent(String(requestParameters['discount']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * orders-order-discounts-discount-delete
     */
    async ordersOrderDiscountsDiscountDelete(requestParameters: OrdersOrderDiscountsDiscountDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.ordersOrderDiscountsDiscountDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * orders-order-id-notes-put
     */
    async ordersOrderIdNotesPutRaw(requestParameters: OrdersOrderIdNotesPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['orderId'] == null) {
            throw new runtime.RequiredError(
                'orderId',
                'Required parameter "orderId" was null or undefined when calling ordersOrderIdNotesPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/orders/{order_id}/notes`.replace(`{${"order_id"}}`, encodeURIComponent(String(requestParameters['orderId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * orders-order-id-notes-put
     */
    async ordersOrderIdNotesPut(requestParameters: OrdersOrderIdNotesPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.ordersOrderIdNotesPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * orders-order-id-put
     */
    async ordersOrderIdPutRaw(requestParameters: OrdersOrderIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['orderId'] == null) {
            throw new runtime.RequiredError(
                'orderId',
                'Required parameter "orderId" was null or undefined when calling ordersOrderIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/orders/{order_id}`.replace(`{${"order_id"}}`, encodeURIComponent(String(requestParameters['orderId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * orders-order-id-put
     */
    async ordersOrderIdPut(requestParameters: OrdersOrderIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.ordersOrderIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * orders-order-id-tags-post
     */
    async ordersOrderIdTagsPostRaw(requestParameters: OrdersOrderIdTagsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['orderId'] == null) {
            throw new runtime.RequiredError(
                'orderId',
                'Required parameter "orderId" was null or undefined when calling ordersOrderIdTagsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/orders/{order_id}/tags`.replace(`{${"order_id"}}`, encodeURIComponent(String(requestParameters['orderId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * orders-order-id-tags-post
     */
    async ordersOrderIdTagsPost(requestParameters: OrdersOrderIdTagsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.ordersOrderIdTagsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * orders-order-payment-info-get
     */
    async ordersOrderPaymentInfoGetRaw(requestParameters: OrdersOrderPaymentInfoGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['order'] == null) {
            throw new runtime.RequiredError(
                'order',
                'Required parameter "order" was null or undefined when calling ordersOrderPaymentInfoGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/orders/{order}/payment-info`.replace(`{${"order"}}`, encodeURIComponent(String(requestParameters['order']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * orders-order-payment-info-get
     */
    async ordersOrderPaymentInfoGet(requestParameters: OrdersOrderPaymentInfoGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.ordersOrderPaymentInfoGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create an order item.
     */
    async postOrderItemsRaw(requestParameters: PostOrderItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrderItemResource>> {
        if (requestParameters['aryeoGroupId'] == null) {
            throw new runtime.RequiredError(
                'aryeoGroupId',
                'Required parameter "aryeoGroupId" was null or undefined when calling postOrderItems().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['aryeoGroupId'] != null) {
            headerParameters['Aryeo-Group-Id'] = String(requestParameters['aryeoGroupId']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/order-items`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OrderItemPostPayloadToJSON(requestParameters['orderItemPostPayload']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderItemResourceFromJSON(jsonValue));
    }

    /**
     * Create an order item.
     */
    async postOrderItems(requestParameters: PostOrderItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrderItemResource> {
        const response = await this.postOrderItemsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create an order.
     */
    async postOrdersRaw(requestParameters: PostOrdersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrderResource>> {
        if (requestParameters['aryeoGroupId'] == null) {
            throw new runtime.RequiredError(
                'aryeoGroupId',
                'Required parameter "aryeoGroupId" was null or undefined when calling postOrders().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['aryeoGroupId'] != null) {
            headerParameters['Aryeo-Group-Id'] = String(requestParameters['aryeoGroupId']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/orders`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OrderPostPayloadToJSON(requestParameters['orderPostPayload']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderResourceFromJSON(jsonValue));
    }

    /**
     * Create an order.
     */
    async postOrders(requestParameters: PostOrdersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrderResource> {
        const response = await this.postOrdersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * promotion-codes-redeem-discountedType-discounted-post
     */
    async promotionCodesRedeemDiscountedTypeDiscountedPostRaw(requestParameters: PromotionCodesRedeemDiscountedTypeDiscountedPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['discountedType'] == null) {
            throw new runtime.RequiredError(
                'discountedType',
                'Required parameter "discountedType" was null or undefined when calling promotionCodesRedeemDiscountedTypeDiscountedPost().'
            );
        }

        if (requestParameters['discounted'] == null) {
            throw new runtime.RequiredError(
                'discounted',
                'Required parameter "discounted" was null or undefined when calling promotionCodesRedeemDiscountedTypeDiscountedPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/promotion-codes/redeem/{discountedType}/{discounted}`.replace(`{${"discountedType"}}`, encodeURIComponent(String(requestParameters['discountedType']))).replace(`{${"discounted"}}`, encodeURIComponent(String(requestParameters['discounted']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * promotion-codes-redeem-discountedType-discounted-post
     */
    async promotionCodesRedeemDiscountedTypeDiscountedPost(requestParameters: PromotionCodesRedeemDiscountedTypeDiscountedPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.promotionCodesRedeemDiscountedTypeDiscountedPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an order item.
     */
    async putOrderItemsOrderItemIdRaw(requestParameters: PutOrderItemsOrderItemIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrderItemResource>> {
        if (requestParameters['orderItemId'] == null) {
            throw new runtime.RequiredError(
                'orderItemId',
                'Required parameter "orderItemId" was null or undefined when calling putOrderItemsOrderItemId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/order-items/{order_item_id}`.replace(`{${"order_item_id"}}`, encodeURIComponent(String(requestParameters['orderItemId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderItemResourceFromJSON(jsonValue));
    }

    /**
     * Update an order item.
     */
    async putOrderItemsOrderItemId(requestParameters: PutOrderItemsOrderItemIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrderItemResource> {
        const response = await this.putOrderItemsOrderItemIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update tags of an order.
     */
    async putOrderTagsTagIdRaw(requestParameters: PutOrderTagsTagIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrderResource>> {
        if (requestParameters['orderId'] == null) {
            throw new runtime.RequiredError(
                'orderId',
                'Required parameter "orderId" was null or undefined when calling putOrderTagsTagId().'
            );
        }

        if (requestParameters['aryeoGroupId'] == null) {
            throw new runtime.RequiredError(
                'aryeoGroupId',
                'Required parameter "aryeoGroupId" was null or undefined when calling putOrderTagsTagId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['aryeoGroupId'] != null) {
            headerParameters['Aryeo-Group-Id'] = String(requestParameters['aryeoGroupId']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/orders/{order_id}/tags`.replace(`{${"order_id"}}`, encodeURIComponent(String(requestParameters['orderId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: OrderTagsPutPayloadToJSON(requestParameters['orderTagsPutPayload']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderResourceFromJSON(jsonValue));
    }

    /**
     * Update tags of an order.
     */
    async putOrderTagsTagId(requestParameters: PutOrderTagsTagIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrderResource> {
        const response = await this.putOrderTagsTagIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * refunds-orderPayment-post
     */
    async refundsOrderPaymentPostRaw(requestParameters: RefundsOrderPaymentPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['orderPayment'] == null) {
            throw new runtime.RequiredError(
                'orderPayment',
                'Required parameter "orderPayment" was null or undefined when calling refundsOrderPaymentPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/refunds/{orderPayment}`.replace(`{${"orderPayment"}}`, encodeURIComponent(String(requestParameters['orderPayment']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * refunds-orderPayment-post
     */
    async refundsOrderPaymentPost(requestParameters: RefundsOrderPaymentPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.refundsOrderPaymentPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const PromotionCodesRedeemDiscountedTypeDiscountedPostDiscountedTypeEnum = {
    Product: 'product',
    Fee: 'fee'
} as const;
export type PromotionCodesRedeemDiscountedTypeDiscountedPostDiscountedTypeEnum = typeof PromotionCodesRedeemDiscountedTypeDiscountedPostDiscountedTypeEnum[keyof typeof PromotionCodesRedeemDiscountedTypeDiscountedPostDiscountedTypeEnum];
